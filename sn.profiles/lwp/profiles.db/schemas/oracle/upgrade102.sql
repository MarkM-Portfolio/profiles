-- ***************************************************************** 
--                                                                   
-- IBM Confidential                                                  
--                                                                   
-- OCO Source Materials                                              
--                                                                   
-- Copyright IBM Corp. 2008, 2010                                    
--                                                                   
-- The source code for this program is not published or otherwise    
-- divested of its trade secrets, irrespective of what has been      
-- deposited with the U.S. Copyright Office.                         
--                                                                   
-- ***************************************************************** 

ALTER TABLE "EMPINST"."EMPLOYEE" ADD "PROF_UID_LOWER" VARCHAR(36);
ALTER TABLE "EMPINST"."EMPLOYEE" ADD "PROF_GW_EMAIL_LOWER" VARCHAR2(128)
ALTER TABLE "EMPINST"."EMPLOYEE" ADD "PROF_LOGIN" VARCHAR(36);
ALTER TABLE "EMPINST"."EMPLOYEE" ADD "PROF_LOGIN_LOWER" VARCHAR(36);
ALTER TABLE "EMPINST"."EMPLOYEE" ADD "PROF_GIVEN_NAME" VARCHAR(128);
ALTER TABLE "EMPINST"."EMPLOYEE" ADD "PROF_SURNAME" VARCHAR(128);

UPDATE "EMPINST"."EMPLOYEE" SET "PROF_UID_LOWER"=LOWER("PROF_UID");
UPDATE "EMPINST"."EMPLOYEE" SET "PROF_GW_EMAIL"=LOWER("PROF_GROUPWARE_EMAIL");
UPDATE "EMPINST"."EMPLOYEE" SET "PROF_LOGIN_LOWER"=LOWER("PROF_LOGIN");
UPDATE "EMPINST"."EMPLOYEE" SET "PROF_UID_LOWER"=LOWER("PROF_UID");

ALTER TABLE "EMPINST"."EMPLOYEE" MODIFY  "PROF_DESCRIPTION" VARCHAR (4000);
ALTER TABLE "EMPINST"."EMPLOYEE" MODIFY  "PROF_EXPERIENCE" VARCHAR (4000);

DROP TRIGGER "EMPINST"."T_EMPLOYEE_INSRT";

CREATE TRIGGER EMPINST."T_EMPLOYEE_INSRT" BEFORE INSERT ON EMPINST."EMPLOYEE" REFERENCING NEW AS N 
	FOR EACH ROW
		BEGIN 
		  SELECT SYSTIMESTAMP INTO :N.PROF_LAST_UPDATE FROM DUAL;
		  SELECT CASE :N.PROF_UID WHEN NULL THEN NULL ELSE LOWER(:N.PROF_UID) END INTO :N.PROF_UID_LOWER FROM DUAL;
		  SELECT CASE :N.PROF_MAIL WHEN NULL THEN NULL ELSE LOWER(:N.PROF_MAIL) END INTO :N.PROF_MAIL_LOWER FROM DUAL;
		  SELECT CASE :N.PROF_GROUPWARE_EMAIL WHEN NULL THEN NULL ELSE LOWER(:N.PROF_GROUPWARE_EMAIL) END INTO :N.PROF_GW_EMAIL_LOWER FROM DUAL;
		  SELECT CASE :N.PROF_LOGIN WHEN NULL THEN NULL ELSE LOWER(:N.PROF_LOGIN) END INTO :N.PROF_LOGIN_LOWER FROM DUAL;
		END;


CREATE TRIGGER EMPINST."T_EMPLOYEE_UID_UPDT" BEFORE UPDATE OF PROF_UID ON EMPINST."EMPLOYEE" REFERENCING NEW AS N 
	FOR EACH ROW
		BEGIN
		 SELECT LOWER(:N.PROF_UID) INTO :N.PROF_UID_LOWER FROM DUAL;
		END;

CREATE TRIGGER EMPINST."T_EMPLOYEE_GW_MAIL_UPDT" BEFORE UPDATE OF PROF_GROUPWARE_EMAIL ON EMPINST."EMPLOYEE" REFERENCING NEW AS N 
	FOR EACH ROW
		BEGIN
		 SELECT LOWER(:N.PROF_GROUPWARE_EMAIL) INTO :N.PROF_GW_EMAIL_LOWER FROM DUAL;
		END;


CREATE TRIGGER EMPINST."T_EMPLOYEE_LOGIN_UPDT" BEFORE UPDATE OF PROF_LOGIN ON EMPINST."EMPLOYEE" REFERENCING NEW AS N 
	FOR EACH ROW
		BEGIN
		 SELECT LOWER(:N.PROF_LOGIN) INTO :N.PROF_LOGIN_LOWER FROM DUAL;
		END;

CREATE INDEX "EMPINST"."UID_LOWER_IDX" ON "EMPINST"."EMPLOYEE" 
		("PROF_UID_LOWER" ASC) ;

CREATE INDEX "EMPINST"."GW_EMAIL_LOWER_IDX" ON "EMPINST"."EMPLOYEE" 
		("PROF_GW_EMAIL_LOWER" ASC) ;

CREATE INDEX "EMPINST"."LOGIN_LOWER_IDX" ON "EMPINST"."EMPLOYEE"
                ("PROF_LOGIN_LOWER" ASC) ;
                         

COMMIT;
QUIT;
