-- ***************************************************************** 
--                                                                   
-- IBM Confidential                                                  
--                                                                   
-- OCO Source Materials                                              
--                                                                   
-- Copyright IBM Corp. 2001, 2010                                    
--                                                                   
-- The source code for this program is not published or otherwise    
-- divested of its trade secrets, irrespective of what has been      
-- deposited with the U.S. Copyright Office.                         
--                                                                   
-- ***************************************************************** 

-- 5724-S68                                                          
CREATE USER SNCORE IDENTIFIED BY changeit PASSWORD EXPIRE ACCOUNT LOCK;
GRANT RESOURCE TO SNCORE;
CREATE SEQUENCE SNCORE.STRUCT_IDENTITY_SEQ;

-- DROP ALL TRIGGERS --------
DROP TRIGGER EMPINST."T_EXT_DRAFT_SEQ";
DROP TRIGGER EMPINST."T_PEOPLE_TAG_SEQ";
DROP TRIGGER EMPINST.T_EMPLOYEE_INSRT;
DROP TRIGGER EMPINST."T_EMPLOYEE_UPDT";
DROP TRIGGER EMPINST."T_EMPLOYEE_UID_UPDT";
DROP TRIGGER EMPINST."T_EMPLOYEE_MAIL_UPDT";
DROP TRIGGER EMPINST."T_EMPLOYEE_GW_MAIL_UPDT";
DROP TRIGGER EMPINST."T_EMPLOYEE_LOGIN_UPDT";
DROP TRIGGER EMPINST."T_PHOTO_INSRT";
DROP TRIGGER EMPINST."T_PHOTO_UPDT";
DROP TRIGGER EMPINST."T_PRONOUNCE_INSRT";
DROP TRIGGER EMPINST."T_PRONOUNCE_UPDT";
DROP TRIGGER EMPINST."T_EMP_DRAFT_SEQ";
DROP TRIGGER EMPINST."T_EMP_INS";
DROP TRIGGER EMPINST."T_EMP_DEL";
DROP TRIGGER EMPINST."T_EMP_UPD";
------------------------------


------------------------------------------------
-- DDL Statements for table "EMPINST"."SNCOMM_SCHEMA"
------------------------------------------------
CREATE TABLE EMPINST.SNPROF_SCHEMA
  (COMPKEY VARCHAR2(36) NOT NULL,
   DBSCHEMAVER  CHAR(1)  NOT NULL) TABLESPACE PROFREGTABSPACE;

INSERT INTO EMPINST.SNPROF_SCHEMA (COMPKEY, DBSCHEMAVER) VALUES ('Profiles', 4);

------------------------------------------------
-- DDL Statements for table "EMPINST"."EMPLOYEE"
------------------------------------------------

--- step 2: rename old table to temp

ALTER TABLE EMPINST.EMPLOYEE RENAME TO EMPLOYEE_T;

--- step 3a: create new table
--- keep the following stmt in sync with createdb.sql

CREATE TABLE EMPINST."EMPLOYEE"  (
  "PROF_KEY" VARCHAR2(36) NOT NULL,
  "PROF_UID" VARCHAR2(256) NOT NULL ,
  "PROF_UID_LOWER" VARCHAR2(256)  ,
  "PROF_LAST_UPDATE" TIMESTAMP ,
  "PROF_MAIL" VARCHAR2(64) ,
  "PROF_MAIL_LOWER" VARCHAR2(64) ,
  "PROF_GUID" VARCHAR2(256) NOT NULL,
  "PROF_SOURCE_UID" VARCHAR2(256) ,
  "PROF_DISPLAY_NAME" VARCHAR2(256) ,
  "PROF_LOGIN" VARCHAR2(36) ,
  "PROF_LOGIN_LOWER" VARCHAR2(36) ,
  "PROF_GIVEN_NAME"		VARCHAR2(128)  ,
  "PROF_SURNAME"		VARCHAR2(128) , 
  "PROF_ALTERNATE_LAST_NAME" VARCHAR2(64) ,
  "PROF_PREFERRED_FIRST_NAME" VARCHAR2(32) ,
  "PROF_PREFERRED_LAST_NAME" VARCHAR2(64) ,
  "PROF_TYPE"			VARCHAR2(64),
  "PROF_MANAGER_UID" VARCHAR2(256) ,
  "PROF_SECRETARY_UID" VARCHAR2(256) ,
  "PROF_IS_MANAGER" CHAR(1) ,
  "PROF_GROUPWARE_EMAIL" VARCHAR2(128) ,
  "PROF_GW_EMAIL_LOWER" VARCHAR2(128) ,
  "PROF_JOB_RESPONSIBILITIES" VARCHAR2(128) ,
  "PROF_ORGANIZATION_IDENTIFIER" VARCHAR2(64) ,
  "PROF_ISO_COUNTRY_CODE" VARCHAR2(3) ,
  "PROF_FAX_TELEPHONE_NUMBER" VARCHAR2(32) ,
  "PROF_IP_TELEPHONE_NUMBER" VARCHAR2(32),
  "PROF_MOBILE" VARCHAR2(32) ,
  "PROF_PAGER" VARCHAR2(32) ,
  "PROF_TELEPHONE_NUMBER" VARCHAR2(32) ,
  "PROF_WORK_LOCATION" VARCHAR2(32) ,
  "PROF_BUILDING_IDENTIFIER" VARCHAR2(16) ,
  "PROF_DEPARTMENT_NUMBER" VARCHAR2(16) ,
  "PROF_EMPLOYEE_TYPE" VARCHAR2(256) ,
  "PROF_FLOOR" VARCHAR2(16) ,
  "PROF_EMPLOYEE_NUMBER" VARCHAR2(16) ,
  "PROF_PAGER_TYPE" VARCHAR2(16) ,
  "PROF_PAGER_ID" VARCHAR2(32) ,
  "PROF_PAGER_SERVICE_PROVIDER" VARCHAR2(50) ,
  "PROF_PHYSICAL_DELIVERY_OFFICE" VARCHAR2(32) ,
  "PROF_PREFERRED_LANGUAGE" VARCHAR2(100) ,
  "PROF_SHIFT" VARCHAR2(4) ,
  "PROF_TITLE" VARCHAR2(256) ,
  "PROF_COURTESY_TITLE" VARCHAR2(64) ,
  "PROF_TIMEZONE" VARCHAR2(50) , 
  "PROF_NATIVE_LAST_NAME" VARCHAR2(256) ,
  "PROF_NATIVE_FIRST_NAME" VARCHAR2(256) ,
  "PROF_BLOG_URL" VARCHAR2(256) ,
  "PROF_FREEBUSY_URL" VARCHAR2(256) ,
  "PROF_CALENDAR_URL" VARCHAR2(256) ,
  "PROF_DESCRIPTION" VARCHAR2(4000) ,
  "PROF_EXPERIENCE" VARCHAR2(4000) ,
  "PROF_SOURCE_URL" VARCHAR2(256))
  TABLESPACE PROFREGTABSPACE ;


--- step 4a: copy data to new table
INSERT INTO "EMPINST"."EMPLOYEE" SELECT
	"PROF_KEY",
	"PROF_UID",
	"PROF_UID_LOWER",
	"PROF_LAST_UPDATE"  ,
	"PROF_MAIL",
	"PROF_MAIL_LOWER",
	"PROF_GUID",
	"PROF_SOURCE_UID",
        "PROF_DISPLAY_NAME",
	"PROF_LOGIN",
	"PROF_LOGIN_LOWER",
	"PROF_GIVEN_NAME" ,
	"PROF_SURNAME",
	"PROF_ALTERNATE_LAST_NAME",
	"PROF_PREFERRED_FIRST_NAME",
	"PROF_PREFERRED_LAST_NAME",
	'',
        "PROF_MANAGER_UID",
        "PROF_SECRETARY_UID",
        "PROF_IS_MANAGER",
	"PROF_GROUPWARE_EMAIL",
	"PROF_GW_EMAIL_LOWER",
	"PROF_JOB_RESPONSIBILITIES",
        "PROF_ORGANIZATION_IDENTIFIER",
	"PROF_ISO_COUNTRY_CODE",
	"PROF_FAX_TELEPHONE_NUMBER",
	"PROF_IP_TELEPHONE_NUMBER",
	"PROF_MOBILE" ,
	"PROF_PAGER",
	"PROF_TELEPHONE_NUMBER",
	"PROF_WORK_LOCATION",
	"PROF_BUILDING_IDENTIFIER",
	"PROF_DEPARTMENT_NUMBER",
	"PROF_EMPLOYEE_TYPE",
	"PROF_FLOOR",
	"PROF_EMPLOYEE_NUMBER" ,
	"PROF_PAGER_TYPE"  ,
	"PROF_PAGER_ID" ,
	"PROF_PAGER_SERVICE_PROVIDER",
	"PROF_PHYSICAL_DELIVERY_OFFICE",
	"PROF_PREFERRED_LANGUAGE",
	"PROF_SHIFT",
	"PROF_TITLE",
        "PROF_COURTESY_TITLE",
	"PROF_TIMEZONE", 
	"PROF_NATIVE_LAST_NAME",
	"PROF_NATIVE_FIRST_NAME",
	"PROF_BLOG_URL",
	"PROF_FREEBUSY_URL",
        "PROF_CALENDAR_URL",
	"PROF_DESCRIPTION",
        "PROF_EXPERIENCE",
	''
FROM "EMPINST"."EMPLOYEE_T";

--- step 5: drop temp table

DROP TABLE EMPINST.EMPLOYEE_T;

--- step 6: create triggers/indices new table
--- keep the following stmts in sync with createdb.sql

CREATE UNIQUE INDEX EMPINST."EMPLOYEE_PK" ON EMPINST."EMPLOYEE" 
		("PROF_KEY" ASC) TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX EMPINST."EMP_GUID_IDX" ON EMPINST."EMPLOYEE" 
		("PROF_GUID" ASC) TABLESPACE PROFINDEXTABSPACE;
		
CREATE INDEX EMPINST."EMP_UID_IDX" ON EMPINST."EMPLOYEE" 
		("PROF_UID" ASC) TABLESPACE PROFINDEXTABSPACE;
		
CREATE INDEX EMPINST."MAIL_IDX" ON EMPINST."EMPLOYEE" 
		("PROF_MAIL" ASC) TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX EMPINST."MAIL_LOWER_IDX" ON EMPINST."EMPLOYEE" 
		("PROF_MAIL_LOWER" ASC) TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX EMPINST."UID_LOWER_IDX" ON EMPINST."EMPLOYEE" 
		("PROF_UID_LOWER" ASC) TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX EMPINST."GW_EMAIL_LOWER_IDX" ON EMPINST."EMPLOYEE" 
		("PROF_GW_EMAIL_LOWER" ASC) TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX EMPINST."PREF_FNX" ON EMPINST."EMPLOYEE" 
		("PROF_PREFERRED_FIRST_NAME" ASC) TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX EMPINST."PREF_LNX" ON EMPINST."EMPLOYEE" 
		("PROF_PREFERRED_LAST_NAME" ASC) TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX EMPINST."DISPNMX" ON EMPINST."EMPLOYEE"
		("PROF_DISPLAY_NAME" ASC) TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX EMPINST."MGRIDX" ON EMPINST."EMPLOYEE" 
		("PROF_MANAGER_UID" ASC) TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX EMPINST."GRPEMAIL_IDX" ON EMPINST."EMPLOYEE" 
		("PROF_GROUPWARE_EMAIL" ASC) TABLESPACE PROFINDEXTABSPACE;
		
CREATE INDEX EMPINST."JOB_RESP_UID_IDX" ON EMPINST."EMPLOYEE" 
		("PROF_JOB_RESPONSIBILITIES", "PROF_KEY") TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX EMPINST."ORG_UID_IDX" ON EMPINST."EMPLOYEE" 
		("PROF_ORGANIZATION_IDENTIFIER", "PROF_KEY") TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX EMPINST."COUNTRY_UID_IDX" ON EMPINST."EMPLOYEE" 
		("PROF_ISO_COUNTRY_CODE", "PROF_KEY") TABLESPACE PROFINDEXTABSPACE;
		
CREATE INDEX EMPINST."FAX_IDX" ON EMPINST."EMPLOYEE"
        ("PROF_FAX_TELEPHONE_NUMBER" ASC) TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX EMPINST."IPPHONE_IDX" ON EMPINST."EMPLOYEE"
        ("PROF_IP_TELEPHONE_NUMBER" ASC) TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX EMPINST."MOBILE_IDX" ON EMPINST."EMPLOYEE"
        ("PROF_MOBILE" ASC) TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX EMPINST."PAGER_IDX" ON EMPINST."EMPLOYEE"
        ("PROF_PAGER" ASC) TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX EMPINST."PHONE_IDX" ON EMPINST."EMPLOYEE"
        ("PROF_TELEPHONE_NUMBER" ASC) TABLESPACE PROFINDEXTABSPACE;
        
CREATE INDEX EMPINST."WORKLOC_IDX" ON EMPINST."EMPLOYEE"
        ("PROF_WORK_LOCATION" ASC) TABLESPACE PROFINDEXTABSPACE;        				
				
CREATE INDEX EMPINST."LOGIN_LOWER_IDX" ON EMPINST."EMPLOYEE" 
		("PROF_LOGIN_LOWER" ASC) TABLESPACE PROFINDEXTABSPACE;


------------------------------------------------
-- DDL Statements for table "EMPINST"."PROFILE_EXTENSIONS"
------------------------------------------------

--- step 1: disable constraints
--- keep the following stmt in sync with predbxfer.sql

--- step 2: rename old table to temp

ALTER TABLE EMPINST.PROFILE_EXTENSIONS RENAME TO PROFILE_EXTENSIONS_T;


--- step 3: create new table
--- keep the following stmt in sync with createdb.sql

CREATE TABLE EMPINST."PROFILE_EXTENSIONS"  (
  "PROF_KEY" VARCHAR2(36) NOT NULL ,
  "PROF_PROPERTY_ID" VARCHAR2(64) NOT NULL ,  
  "PROF_EXT_KEY" VARCHAR2(256) ,
  "PROF_NAME" VARCHAR2(256) ,
  "PROF_DATA_TYPE" VARCHAR2(64) ,   
  "PROF_VALUE" VARCHAR2(1024),
  "PROF_VALUE_EXTENDED" BLOB,
  PRIMARY KEY (PROF_KEY, PROF_PROPERTY_ID))  
  ORGANIZATION INDEX 
  TABLESPACE PROFREGTABSPACE;


--- step 4: copy data to new table

INSERT INTO "EMPINST"."PROFILE_EXTENSIONS" 
	("PROF_KEY",
	"PROF_PROPERTY_ID",
	"PROF_EXT_KEY",
	"PROF_NAME",
	"PROF_DATA_TYPE",
	"PROF_VALUE")
SELECT
	"PROF_UID",
	"PROF_PROPERTY_ID",
	"PROF_KEY",
	"PROF_NAME",
	"PROF_DATA_TYPE",
	"PROF_VALUE"
FROM "EMPINST"."PROFILE_EXTENSIONS_T";

UPDATE "EMPINST"."PROFILE_EXTENSIONS" T 
	SET "PROF_KEY"=
		(SELECT "PROF_KEY" 
		FROM "EMPINST"."EMPLOYEE" E 
		WHERE "PROF_UID"=T."PROF_KEY");

--- step 5: drop temp table

DROP TABLE EMPINST.PROFILE_EXTENSIONS_T;

--- step 6: create triggers/indices new table
--- keep the following stmts in sync with createdb.sql

CREATE INDEX EMPINST."PROFILE_EXTENSIONS_IDX" ON EMPINST."PROFILE_EXTENSIONS" 
		("PROF_KEY" ASC) TABLESPACE PROFINDEXTABSPACE;



------------------------------------------------
-- DDL Statements for table "EMPINST"."PROFILE_EXT_DRAFT"
------------------------------------------------

--- step 1: disable constraints
--- keep the following stmt in sync with predbxfer.sql

--- step 2: rename old table to temp

ALTER TABLE EMPINST.PROFILE_EXT_DRAFT RENAME TO PROFILE_EXT_DRAFT_T;

--- step 3: create new table
--- keep the following stmt in sync with createdb.sql

CREATE TABLE EMPINST."PROFILE_EXT_DRAFT"  (
  "PROF_UPDATE_SEQUENCE" NUMBER(19,0) NOT NULL,
  "PROF_KEY" VARCHAR2(36) NOT NULL ,
  "PROF_PROPERTY_ID" VARCHAR2(64) NOT NULL ,  
  "PROF_EXT_KEY" VARCHAR2(256) ,
  "PROF_NAME" VARCHAR2(256) ,
  "PROF_DATA_TYPE" VARCHAR2(64) ,   
  "PROF_VALUE" VARCHAR2(1024),
  "PROF_VALUE_EXTENDED" BLOB,
  PRIMARY KEY (PROF_KEY, PROF_UPDATE_SEQUENCE))  
  ORGANIZATION INDEX 
  TABLESPACE PROFREGTABSPACE;

--- step 4: copy data to new table

INSERT INTO "EMPINST"."PROFILE_EXT_DRAFT" 
	("PROF_UPDATE_SEQUENCE", 
	"PROF_KEY",
	"PROF_PROPERTY_ID",
	"PROF_EXT_KEY",
	"PROF_NAME",
	"PROF_DATA_TYPE",
	"PROF_VALUE")
   SELECT
	"PROF_UPDATE_SEQUENCE", 
	"PROF_UID",
	"PROF_PROPERTY_ID",
	"PROF_KEY",
	"PROF_NAME",
	"PROF_DATA_TYPE",
	"PROF_VALUE"
FROM "EMPINST"."PROFILE_EXT_DRAFT_T";

UPDATE "EMPINST"."PROFILE_EXT_DRAFT" T 
	SET "PROF_KEY"=
		(SELECT "PROF_KEY" 
		FROM "EMPINST"."EMPLOYEE" E 
		WHERE "PROF_UID"=T."PROF_KEY");

--- step 5: drop temp table

DROP TABLE EMPINST.PROFILE_EXT_DRAFT_T;

--- step 6: create triggers/indices new table
--- keep the following stmts in sync with createdb.sql


ALTER TABLE EMPINST.GIVEN_NAME RENAME TO GIVEN_NAME_T;
-- create table --
CREATE TABLE EMPINST."GIVEN_NAME"  (
  "PROF_KEY" VARCHAR2(36) NOT NULL , 
  "PROF_GIVENNAME" VARCHAR2(128) NOT NULL )
  TABLESPACE PROFREGTABSPACE;
-- copy table --
INSERT INTO "EMPINST"."GIVEN_NAME" SELECT
	"PROF_UID",
	"PROF_GIVENNAME"
FROM "EMPINST"."GIVEN_NAME_T";

--- remove orphan data
DELETE FROM "EMPINST"."GIVEN_NAME"
	WHERE "PROF_KEY" NOT IN (SELECT "PROF_UID" FROM "EMPINST"."EMPLOYEE");

UPDATE "EMPINST"."GIVEN_NAME" T 
	SET "PROF_KEY"=
		(SELECT "PROF_KEY" 
		FROM "EMPINST"."EMPLOYEE" E 
		WHERE "PROF_UID"=T."PROF_KEY");
-- drop temporary table--
DROP TABLE EMPINST.GIVEN_NAME_T;
-- create index --
CREATE INDEX EMPINST."GIVEN_NAMEX" ON EMPINST."GIVEN_NAME" 
		("PROF_KEY" ASC) TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX EMPINST."GIVEN_NAME_IDX" ON EMPINST."GIVEN_NAME" 
		("PROF_GIVENNAME" ASC) TABLESPACE PROFINDEXTABSPACE;
		
CREATE INDEX EMPINST."GIVEN_NAME_IDX2" ON EMPINST."GIVEN_NAME" 
		("PROF_GIVENNAME" ASC, "PROF_KEY" ASC) TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX EMPINST."GIVEN_NAME_WIZ1" ON EMPINST."GIVEN_NAME" 
		("PROF_KEY" DESC,
		 "PROF_GIVENNAME" DESC) TABLESPACE PROFINDEXTABSPACE;

ALTER TABLE EMPINST.SURNAME RENAME TO SURNAME_T;
-- create table --
CREATE TABLE EMPINST."SURNAME"  (
  "PROF_KEY" VARCHAR2(36) NOT NULL , 
  "PROF_SURNAME" VARCHAR2(128) NOT NULL ) 
  TABLESPACE PROFREGTABSPACE;
-- copy table --
INSERT INTO "EMPINST"."SURNAME" SELECT
	"PROF_UID",
	"PROF_SURNAME"
FROM "EMPINST"."SURNAME_T";

--- remove orphan data
DELETE FROM "EMPINST"."SURNAME"
	WHERE "PROF_KEY" NOT IN (SELECT "PROF_UID" FROM "EMPINST"."EMPLOYEE");

UPDATE "EMPINST"."SURNAME" T 
	SET "PROF_KEY"=
		(SELECT "PROF_KEY" 
		FROM "EMPINST"."EMPLOYEE" E 
		WHERE "PROF_UID"=T."PROF_KEY");
-- drop temporary table--
DROP TABLE EMPINST.SURNAME_T;
-- create index --
CREATE INDEX EMPINST."SURNAMEX" ON EMPINST."SURNAME" 
		("PROF_KEY" ASC) TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX EMPINST."SURNAME_IDX" ON EMPINST."SURNAME" 
		("PROF_SURNAME" ASC) TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX EMPINST."SURNAME_UID_IDX" ON EMPINST."SURNAME" 
		("PROF_SURNAME" ASC, "PROF_KEY" ASC) TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX EMPINST."SURNAME_WIZ1" ON EMPINST."SURNAME" 
		("PROF_KEY" DESC,
		 "PROF_SURNAME" DESC) TABLESPACE PROFINDEXTABSPACE;



------------------------------------------------
-- DDL Statements for table "EMPINST"."PEOPLE_TAG"
------------------------------------------------

--- step 1: disable constraints
--- keep the following stmt in sync with predbxfer.sql

--- step 2: rename old table to temp

ALTER TABLE EMPINST.PEOPLE_TAG RENAME TO PEOPLE_TAG_T;


--- step 3: create new table
--- keep the following stmt in sync with createdb.sql

CREATE TABLE EMPINST."PEOPLE_TAG" (
  "PROF_TAG_ID" VARCHAR2(36) NOT NULL ,
  "PROF_SOURCE_KEY" VARCHAR2(36) NOT NULL,
  "PROF_TARGET_KEY" VARCHAR2(36) NOT NULL,
  "PROF_TAG" VARCHAR2(256) NOT NULL,
  PRIMARY KEY (PROF_TAG_ID))  
  ORGANIZATION INDEX
  TABLESPACE PROFREGTABSPACE;

--- step 4: copy data to new table

INSERT INTO "EMPINST"."PEOPLE_TAG" 
	("PROF_TAG_ID",
	"PROF_SOURCE_KEY",
	"PROF_TARGET_KEY", 
	"PROF_TAG") 
  SELECT "PROF_TAG_ID",
	"PROF_EMP_UID",
	"PROF_EMP_UID",
	"PROF_TAG"
FROM "EMPINST"."PEOPLE_TAG_T";

--- remove orphan data
DELETE FROM "EMPINST"."PEOPLE_TAG"
	WHERE "PROF_TARGET_KEY" NOT IN (SELECT "PROF_UID" FROM "EMPINST"."EMPLOYEE");

UPDATE "EMPINST"."PEOPLE_TAG" T 
	SET "PROF_TARGET_KEY"=
		(SELECT "PROF_KEY" 
		FROM "EMPINST"."EMPLOYEE" E 
		WHERE "PROF_UID"=T."PROF_TARGET_KEY");

--- step 5: drop temp table

DROP TABLE EMPINST.PEOPLE_TAG_T;

--- step 6: create triggers/indices new table
--- keep the following stmts in sync with createdb.sql

CREATE INDEX EMPINST."PEOPLE_TAG_IDX" ON EMPINST."PEOPLE_TAG" 
		("PROF_TAG" ASC, "PROF_TARGET_KEY" ASC) TABLESPACE PROFINDEXTABSPACE;


CREATE UNIQUE INDEX EMPINST."PEOPLE_TAG_UDX" ON EMPINST."PEOPLE_TAG" 
		("PROF_SOURCE_KEY" ASC, "PROF_TARGET_KEY" ASC, "PROF_TAG" ASC) TABLESPACE PROFINDEXTABSPACE;

------------------------------------------------
-- DDL Statements for table "EMPINST"."PHOTO"
------------------------------------------------

--- step 1: disable constraints
--- keep the following stmt in sync with predbxfer.sql

--- step 2: rename old table to temp

ALTER TABLE EMPINST.PHOTO RENAME TO PHOTO_T;

--- step 3: create new table
--- keep the following stmt in sync with createdb.sql

CREATE TABLE EMPINST."PHOTO"  (
  "PROF_KEY" VARCHAR2(36) NOT NULL , 
  "PROF_FILE_TYPE" VARCHAR2(50) , 
  "PROF_UPDATED" TIMESTAMP  DEFAULT SYSTIMESTAMP NOT NULL,
  "PROF_IMAGE" BLOB ,
  "PROF_THUMBNAIL" BLOB ,
  PRIMARY KEY (PROF_KEY)  ) 
  TABLESPACE PROFREGTABSPACE;

--- step 4: copy data to new table

INSERT INTO "EMPINST"."PHOTO" 
	("PROF_KEY",
	"PROF_FILE_TYPE",
	"PROF_UPDATED",
	"PROF_IMAGE")
    SELECT
	"PROF_UID", 
	"PROF_FILE_TYPE",
	"PROF_UPDATED",
	"PROF_IMAGE"
FROM "EMPINST"."PHOTO_T";

--- remove orphan data

DELETE FROM "EMPINST"."PHOTO"
	WHERE "PROF_KEY" NOT IN (SELECT "PROF_UID" FROM "EMPINST"."EMPLOYEE");

UPDATE "EMPINST"."PHOTO" T 
	SET "PROF_KEY"=
		(SELECT "PROF_KEY" 
		FROM "EMPINST"."EMPLOYEE" E 
		WHERE "PROF_UID"=T."PROF_KEY");

--- step 5: drop temp table

DROP TABLE EMPINST.PHOTO_T;

--- step 6: create triggers/indices new table
--- keep the following stmts in sync with createdb.sql

CREATE INDEX EMPINST."PHOTOIDX" ON EMPINST."PHOTO" 
		("PROF_UPDATED" DESC) TABLESPACE PROFINDEXTABSPACE;


------------------------------------------------
-- DDL Statements for table "EMPINST"."PRONUNCIATION"
------------------------------------------------

--- step 1: disable constraints
--- keep the following stmt in sync with predbxfer.sql

--- step 2: rename old table to temp

ALTER TABLE EMPINST.PRONUNCIATION RENAME TO PRONUNCIATION_T;

--- step 3: create new table
--- keep the following stmt in sync with createdb.sql

CREATE TABLE EMPINST."PRONUNCIATION"  (
  "PROF_KEY" VARCHAR2(36) NOT NULL , 
  "PROF_PRONOUNCE" BLOB , 
  "PROF_UPDATED" TIMESTAMP  DEFAULT SYSTIMESTAMP NOT NULL,
  PRIMARY KEY (PROF_KEY)  ) 
  TABLESPACE PROFREGTABSPACE; 

--- step 4: copy data to new table

INSERT INTO "EMPINST"."PRONUNCIATION" SELECT
	"PROF_UID", 
	"PROF_PRONOUNCE",
	"PROF_UPDATED"
FROM "EMPINST"."PRONUNCIATION_T";

--- remove orphan data

DELETE FROM "EMPINST"."PRONUNCIATION"
	WHERE "PROF_KEY" NOT IN (SELECT "PROF_UID" FROM "EMPINST"."EMPLOYEE");

UPDATE "EMPINST"."PRONUNCIATION" T 
	SET "PROF_KEY"=
		(SELECT "PROF_KEY" 
		FROM "EMPINST"."EMPLOYEE" E 
		WHERE "PROF_UID"=T."PROF_KEY");

--- step 5: drop temp table

DROP TABLE EMPINST.PRONUNCIATION_T;

--- step 6: create triggers/indices new table
--- keep the following stmts in sync with createdb.sql

CREATE INDEX EMPINST."PRONOUNCEIDX" ON EMPINST."PRONUNCIATION" 
		("PROF_UPDATED" DESC) TABLESPACE PROFINDEXTABSPACE;



------------------------------------------------
-- DDL Statements for table "EMPINST"."EMP_DRAFT"
------------------------------------------------

--- step 1: disable constraints
--- keep the following stmt in sync with predbxfer.sql

--- step 2: rename old table to temp

ALTER TABLE EMPINST.EMP_DRAFT RENAME TO EMP_DRAFT_T;

--- step 3: create new table
--- keep the following stmt in sync with createdb.sql

CREATE TABLE EMPINST."EMP_DRAFT"  (
  "PROF_UPDATE_SEQUENCE" NUMBER(19,0),
  "PROF_KEY" VARCHAR2(36) NOT NULL,
  "PROF_UID" VARCHAR2(256) NOT NULL ,
  "PROF_LAST_UPDATE" TIMESTAMP ,
  "PROF_MAIL" VARCHAR2(64) ,
  "PROF_SOURCE_UID" VARCHAR2(256),
  "PROF_GUID" VARCHAR2(256) ,
  "PROF_DISPLAY_NAME" VARCHAR2(256) ,
  "PROF_LOGIN" VARCHAR2(36) ,
  "PROF_GIVEN_NAME"		VARCHAR2(128)  ,
  "PROF_SURNAME"		VARCHAR2(128) , 
  "PROF_ALTERNATE_LAST_NAME" VARCHAR2(64) ,
  "PROF_PREFERRED_FIRST_NAME" VARCHAR2(32) ,
  "PROF_PREFERRED_LAST_NAME" VARCHAR2(64) ,
  "PROF_TYPE"			VARCHAR2(64),
  "PROF_MANAGER_UID" VARCHAR2(256) ,
  "PROF_SECRETARY_UID" VARCHAR2(256) ,
  "PROF_IS_MANAGER" CHAR(1) ,
  "PROF_GROUPWARE_EMAIL" VARCHAR2(128) ,
  "PROF_JOB_RESPONSIBILITIES" VARCHAR2(128) ,
  "PROF_ORGANIZATION_IDENTIFIER" VARCHAR2(64) ,
  "PROF_ISO_COUNTRY_CODE" VARCHAR2(3) ,
  "PROF_FAX_TELEPHONE_NUMBER" VARCHAR2(32) ,
  "PROF_IP_TELEPHONE_NUMBER" VARCHAR2(32),
  "PROF_MOBILE" VARCHAR2(32) ,
  "PROF_PAGER" VARCHAR2(32) ,
  "PROF_TELEPHONE_NUMBER" VARCHAR2(32) ,
  "PROF_WORK_LOCATION" VARCHAR2(32) ,
  "PROF_BUILDING_IDENTIFIER" VARCHAR2(16) ,
  "PROF_DEPARTMENT_NUMBER" VARCHAR2(16) ,
  "PROF_EMPLOYEE_TYPE" VARCHAR2(256) ,
  "PROF_FLOOR" VARCHAR2(16) ,
  "PROF_EMPLOYEE_NUMBER" VARCHAR2(16) ,
  "PROF_PAGER_TYPE" VARCHAR2(16) ,
  "PROF_PAGER_ID" VARCHAR2(32) ,
  "PROF_PAGER_SERVICE_PROVIDER" VARCHAR2(50) ,
  "PROF_PHYSICAL_DELIVERY_OFFICE" VARCHAR2(32) ,
  "PROF_PREFERRED_LANGUAGE" VARCHAR2(100) ,
  "PROF_SHIFT" VARCHAR2(4) ,
  "PROF_TITLE" VARCHAR2(256) ,
  "PROF_COURTESY_TITLE" VARCHAR2(64) ,
  "PROF_TIMEZONE" VARCHAR2(50) , 
  "PROF_NATIVE_LAST_NAME" VARCHAR2(256) ,
  "PROF_NATIVE_FIRST_NAME" VARCHAR2(256) ,
  "PROF_BLOG_URL" VARCHAR2(256) ,
  "PROF_FREEBUSY_URL" VARCHAR2(256) ,
  "PROF_CALENDAR_URL" VARCHAR2(256) ,
  "PROF_DESCRIPTION" VARCHAR2(4000) ,
  "PROF_EXPERIENCE" VARCHAR2(4000),
  PRIMARY KEY (PROF_UPDATE_SEQUENCE, PROF_KEY))
  TABLESPACE PROFREGTABSPACE ;

--- step 4: copy data to new table

INSERT INTO "EMPINST"."EMP_DRAFT" SELECT
	"PROF_UPDATE_SEQUENCE",
	"PROF_UID",
	"PROF_UID",
	"PROF_LAST_UPDATE"  ,
	"PROF_MAIL",
	"PROF_SOURCE_UID",
	"PROF_GUID",
        "PROF_DISPLAY_NAME",
	'',
	'',
	'',
	"PROF_ALTERNATE_LAST_NAME",
	"PROF_PREFERRED_FIRST_NAME",
	"PROF_PREFERRED_LAST_NAME",
	'',
        "PROF_MANAGER_UID",
        "PROF_SECRETARY_UID",
        "PROF_IS_MANAGER",
	"PROF_GROUPWARE_EMAIL",
	"PROF_JOB_RESPONSIBILITIES",
        "PROF_ORGANATION_IDENTIFIER",
	"PROF_ISO_COUNTRY_CODE",
	"PROF_FAX_TELEPHONE_NUMBER",
	"PROF_IP_TELEPHONE_NUMBER",
	"PROF_MOBILE" ,
	"PROF_PAGER",
	"PROF_TELEPHONE_NUMBER",
	"PROF_WORK_LOCATION",
	"PROF_BUILDING_IDENTIFIER",
	"PROF_DEPARTMENT_NUMBER",
	"PROF_EMPLOYEE_TYPE",
	"PROF_FLOOR",
	"PROF_EMPLOYEE_NUMBER" ,
	"PROF_PAGER_TYPE"  ,
	"PROF_PAGER_ID" ,
	"PROF_PAGER_SERVICE_PROVIDER",
	"PROF_PHYSICAL_DELIVERY_OFFICE",
	"PROF_PREFERRED_LANGUAGE",
	"PROF_SHIFT",
	"PROF_TITLE",
        "PROF_COURTESY_TITLE",
	"PROF_TIMEZONE", 
	"PROF_NATIVE_LAST_NAME",
	"PROF_NATIVE_FIRST_NAME",
	"PROF_BLOG_URL",
	"PROF_FREEBUSY_URL",
        "PROF_CALENDAR_URL",
	"PROF_DESCRIPTION",
        "PROF_EXPERIENCE"
FROM "EMPINST"."EMP_DRAFT_T";

UPDATE "EMPINST"."EMP_DRAFT" T 
	SET "PROF_KEY"=
		(SELECT "PROF_KEY" 
		FROM "EMPINST"."EMPLOYEE" E 
		WHERE "PROF_UID"=T."PROF_KEY");

--- step 5: drop temp table

DROP TABLE EMPINST.EMP_DRAFT_T;

--- step 6: create triggers/indices new table
--- keep the following stmts in sync with createdb.sql

CREATE UNIQUE INDEX EMPINST."EMP_DRAFT_PK" ON EMPINST."EMP_DRAFT" 
		("PROF_KEY" ASC, "PROF_UPDATE_SEQUENCE" ASC) TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX EMPINST."ED_MAIL" ON EMPINST."EMP_DRAFT" 
		("PROF_MAIL" ASC) TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX EMPINST."ED_PREF_FNX" ON EMPINST."EMP_DRAFT" 
		("PROF_PREFERRED_FIRST_NAME" ASC) TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX EMPINST."ED_PREF_LNX" ON EMPINST."EMP_DRAFT" 
		("PROF_PREFERRED_LAST_NAME" ASC) TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX EMPINST."ED_DISPNMX" ON EMPINST."EMP_DRAFT" 
		("PROF_DISPLAY_NAME" ASC) TABLESPACE PROFINDEXTABSPACE;


------------------------------------------------
-- DDL Statements for table "EMPINST"."CHG_EMP_DRAFT"
------------------------------------------------

--- step 1: disable constraints
--- keep the following stmt in sync with predbxfer.sql

--- step 2: rename old table to temp

ALTER TABLE EMPINST.CHG_EMP_DRAFT RENAME TO CHG_EMP_DRAFT_T;

--- step 3: create new table
--- keep the following stmt in sync with createdb.sql

CREATE TABLE EMPINST."CHG_EMP_DRAFT" ( 
  IBMSNAP_COMMITSEQ NUMBER(19,0) NULL, 
  IBMSNAP_INTENTSEQ NUMBER(19,0) NOT NULL,
  IBMSNAP_OPERATION CHAR(1) NOT NULL,	 
  IBMSNAP_LOGMARKER DATE NOT NULL, 
  PROF_UPDATE_SEQUENCE NUMBER(19,0) NOT NULL,
  PROF_KEY VARCHAR2(36) NOT NULL)
  TABLESPACE PROFREGTABSPACE;

--- step 4: copy data to new table

INSERT INTO "EMPINST"."CHG_EMP_DRAFT" SELECT
	utl_raw.cast_to_number("IBMSNAP_COMMITSEQ"), 
	utl_raw.cast_to_number("IBMSNAP_INTENTSEQ"),
	"IBMSNAP_LOGMARKER",
	"IBMSNAP_OPERATION",
	"PROF_UPDATE_SEQUENCE",
	"PROF_UID"
FROM "EMPINST"."CHG_EMP_DRAFT_T";

UPDATE "EMPINST"."CHG_EMP_DRAFT" T 
	SET "PROF_KEY"=
		(SELECT "PROF_KEY" 
		FROM "EMPINST"."EMPLOYEE" E 
		WHERE "PROF_UID"=T."PROF_KEY");

--- step 5: drop temp table

DROP TABLE EMPINST.CHG_EMP_DRAFT_T;

--- step 6: create triggers/indices new table
--- keep the following stmts in sync with createdb.sql


------------------------------------------------
-- DDL Statements for table "SNCORE"."STRUCT_TAG"
------------------------------------------------

CREATE TABLE SNCORE.STRUCT_TAG (
	"NODE_ID"  	INTEGER NOT NULL,
	"PARENT_ID" 	INTEGER,
	"TERM"		VARCHAR2 (256) NOT NULL,
	"TERM_LOWER"	VARCHAR2 (256) NOT NULL,
  PRIMARY KEY (PARENT_ID, TERM_LOWER)) 
  ORGANIZATION INDEX 
  TABLESPACE PROFREGTABSPACE;

-- DDL Statements for indexes on Table "EMPINST"."PROF_STRUCT_TAG"

CREATE INDEX SNCORE."STRUCT_TAG_IDX" ON "SNCORE"."STRUCT_TAG" 
  ("PARENT_ID") TABLESPACE PROFINDEXTABSPACE;
GRANT SELECT,UPDATE,DELETE ON SNCORE.STRUCT_TAG TO EMPINST;
		
-- CREATE TABLE "EMPINST"."PROF_STRUCT_TAG" --
------------------------------------------------
-- DDL Statements for table "EMPINST"."PROF_STRUCT_TAG"
------------------------------------------------
CREATE TABLE "EMPINST"."PROF_STRUCT_TAG" (
	  "PROF_SOURCE_KEY" VARCHAR2(36) NOT NULL,
	  "PROF_TARGET_KEY" VARCHAR2(36) NOT NULL,
	  "PROF_NODE_ID" CHAR(36) NOT NULL,
	  PRIMARY KEY (PROF_SOURCE_KEY, PROF_TARGET_KEY, PROF_NODE_ID)) 
	TABLESPACE PROFREGTABSPACE;

-- DDL Statements for indexes on Table "EMPINST"."PROF_STRUCT_TAG"

CREATE INDEX "EMPINST"."PROF_STRUCT_TAG_IDX" ON "EMPINST"."PROF_STRUCT_TAG" 
		("PROF_TARGET_KEY") TABLESPACE PROFINDEXTABSPACE ;

CREATE INDEX "EMPINST"."PROF_STRUCT_NODE_IDX" ON "EMPINST"."PROF_STRUCT_TAG" 
		("PROF_NODE_ID") TABLESPACE PROFINDEXTABSPACE;
		
		
-- CREATE TABLE "EMPINST"."PROF_CONNECTIONS" 
CREATE TABLE EMPINST.PROF_CONNECTIONS (
		PROF_CONNECTION_ID VARCHAR2(36) NOT NULL,
		PROF_SOURCE_KEY VARCHAR2(256) NOT NULL,
		PROF_TARGET_KEY VARCHAR2(256) NOT NULL,
		PROF_CREATED_BY_KEY VARCHAR2(256) NOT NULL,
		PROF_LASTMOD_BY_KEY VARCHAR2(256) NOT NULL,
		PROF_LASTMOD TIMESTAMP NOT NULL,
		PROF_CREATED TIMESTAMP NOT NULL,
		PROF_STATUS NUMBER(19,0) NOT NULL,
		PROF_VISIBILITY NUMBER(19,0) NOT NULL,
		PROF_TYPE SMALLINT NOT NULL,
		PROF_VALUE VARCHAR2(36) NOT NULL,
		PROF_MESSAGE VARCHAR2(2000),
		PRIMARY KEY (PROF_CONNECTION_ID) USING INDEX TABLESPACE PROFINDEXTABSPACE)  
	TABLESPACE PROFREGTABSPACE;

CREATE INDEX EMPINST."INDEX CONN_INDEX1" ON EMPINST.PROF_CONNECTIONS(PROF_SOURCE_KEY, PROF_CREATED_BY_KEY, PROF_STATUS, PROF_VISIBILITY, PROF_TYPE) TABLESPACE PROFINDEXTABSPACE;
CREATE INDEX EMPINST."INDEX CONN_INDEX2" ON EMPINST.PROF_CONNECTIONS(PROF_TARGET_KEY, PROF_CREATED_BY_KEY, PROF_STATUS, PROF_VISIBILITY, PROF_TYPE) TABLESPACE PROFINDEXTABSPACE;                             

CREATE UNIQUE INDEX EMPINST."CONN_UDX" ON EMPINST.PROF_CONNECTIONS(PROF_SOURCE_KEY, PROF_TARGET_KEY, PROF_VALUE) TABLESPACE PROFINDEXTABSPACE;


--------------------------------------
-- CREATE THE TRIGGERS
--------------------------------------
CREATE TRIGGER EMPINST."T_EXT_DRAFT_SEQ" BEFORE INSERT ON EMPINST."PROFILE_EXT_DRAFT" REFERENCING NEW AS N 
	FOR EACH ROW
		BEGIN
		 SELECT EMPINST.EXT_DRAFT_SEQ.NEXTVAL INTO :N.PROF_UPDATE_SEQUENCE FROM DUAL;
		END;
/



CREATE TRIGGER EMPINST.T_EMPLOYEE_INSRT 
	BEFORE INSERT ON EMPINST.EMPLOYEE REFERENCING NEW AS N 
	FOR EACH ROW
		BEGIN 
			SELECT SYSTIMESTAMP INTO :N.PROF_LAST_UPDATE FROM DUAL;
			SELECT CASE :N.PROF_UID WHEN NULL THEN NULL ELSE LOWER(:N.PROF_UID) END INTO :N.PROF_UID_LOWER FROM DUAL;
			SELECT CASE :N.PROF_MAIL WHEN NULL THEN NULL ELSE LOWER(:N.PROF_MAIL) END INTO :N.PROF_MAIL_LOWER FROM DUAL;
			SELECT CASE :N.PROF_GROUPWARE_EMAIL WHEN NULL THEN NULL ELSE LOWER(:N.PROF_GROUPWARE_EMAIL) END INTO :N.PROF_GW_EMAIL_LOWER FROM DUAL;
			SELECT CASE :N.PROF_LOGIN WHEN NULL THEN NULL ELSE LOWER(:N.PROF_LOGIN) END INTO :N.PROF_LOGIN_LOWER FROM DUAL;
		END;
/

CREATE TRIGGER EMPINST."T_EMPLOYEE_UPDT" BEFORE UPDATE ON EMPINST."EMPLOYEE" REFERENCING NEW AS N 
	FOR EACH ROW
		BEGIN
		 SELECT SYSTIMESTAMP INTO :N.PROF_LAST_UPDATE FROM DUAL;
		END;
/

CREATE TRIGGER EMPINST."T_EMPLOYEE_UID_UPDT" BEFORE UPDATE OF PROF_UID ON EMPINST."EMPLOYEE" REFERENCING NEW AS N 
	FOR EACH ROW
		BEGIN
		 SELECT LOWER(:N.PROF_UID) INTO :N.PROF_UID_LOWER FROM DUAL;
		END;
/

CREATE TRIGGER EMPINST."T_EMPLOYEE_MAIL_UPDT" BEFORE UPDATE OF PROF_UID ON EMPINST."EMPLOYEE" REFERENCING NEW AS N 
	FOR EACH ROW
		BEGIN
		 SELECT LOWER(:N.PROF_MAIL) INTO :N.PROF_MAIL_LOWER FROM DUAL;
		END;
/

CREATE TRIGGER EMPINST."T_EMPLOYEE_GW_MAIL_UPDT" BEFORE UPDATE OF PROF_GROUPWARE_EMAIL ON EMPINST."EMPLOYEE" REFERENCING NEW AS N 
	FOR EACH ROW
		BEGIN
		 SELECT LOWER(:N.PROF_GROUPWARE_EMAIL) INTO :N.PROF_GW_EMAIL_LOWER FROM DUAL;
		END;
/

CREATE TRIGGER EMPINST."T_EMPLOYEE_LOGIN_UPDT" BEFORE UPDATE OF PROF_LOGIN ON EMPINST."EMPLOYEE" REFERENCING NEW AS N 
	FOR EACH ROW
		BEGIN
		 SELECT LOWER(:N.PROF_LOGIN) INTO :N.PROF_LOGIN_LOWER FROM DUAL;
		END;
/

CREATE TRIGGER EMPINST."T_PHOTO_INSRT" BEFORE INSERT ON EMPINST."PHOTO" REFERENCING NEW AS N 
	FOR EACH ROW
		BEGIN
		 SELECT SYSTIMESTAMP INTO :N.PROF_UPDATED FROM DUAL;
		END;
/

CREATE TRIGGER EMPINST."T_PHOTO_UPDT" BEFORE UPDATE ON EMPINST."PHOTO" REFERENCING NEW AS N 
	FOR EACH ROW 
		BEGIN
		 SELECT SYSTIMESTAMP INTO :N.PROF_UPDATED FROM DUAL;
		END;
/


CREATE TRIGGER EMPINST."T_PRONOUNCE_INSRT" BEFORE INSERT ON EMPINST."PRONUNCIATION" REFERENCING NEW AS N 
	FOR EACH ROW 
		BEGIN 
		 SELECT SYSTIMESTAMP INTO :N.PROF_UPDATED FROM DUAL;
		END;
/

CREATE TRIGGER EMPINST."T_PRONOUNCE_UPDT" BEFORE UPDATE ON EMPINST."PRONUNCIATION" REFERENCING NEW AS N 
	FOR EACH ROW
		BEGIN
		 SELECT SYSTIMESTAMP INTO :N.PROF_UPDATED FROM DUAL;
		END;
/


CREATE TRIGGER EMPINST."T_EMP_DRAFT_SEQ" BEFORE INSERT ON EMPINST."EMP_DRAFT" REFERENCING NEW AS N 
	FOR EACH ROW 
		BEGIN
		 SELECT EMPINST.EMP_DRAFT_SEQ.NEXTVAL INTO :N.PROF_UPDATE_SEQUENCE FROM DUAL;
		END;
/


CREATE TRIGGER EMPINST."T_EMP_INS" AFTER INSERT ON EMPINST."EMP_DRAFT" REFERENCING NEW AS N 
	FOR EACH ROW
		BEGIN 
		 INSERT INTO EMPINST."CHG_EMP_DRAFT" (IBMSNAP_COMMITSEQ, IBMSNAP_INTENTSEQ, IBMSNAP_OPERATION,
                                                 IBMSNAP_LOGMARKER, PROF_UPDATE_SEQUENCE, PROF_KEY)
 		 VALUES (LPAD(TO_CHAR(EMPINST.CHG_EMP_DRAFT_SEQ1.NEXTVAL),20,'0'), LPAD(TO_CHAR(EMPINST.CHG_EMP_DRAFT_SEQ2.NEXTVAL),20,'0'), 'I', SYSDATE, :N.PROF_UPDATE_SEQUENCE, :N.PROF_KEY);
		END;
/
		 

CREATE TRIGGER EMPINST."T_EMP_DEL" AFTER DELETE ON EMPINST."EMP_DRAFT" REFERENCING OLD AS N 
	FOR EACH ROW 
		 BEGIN 
		 INSERT INTO EMPINST."CHG_EMP_DRAFT" (IBMSNAP_COMMITSEQ, IBMSNAP_INTENTSEQ, IBMSNAP_OPERATION,
                                                 IBMSNAP_LOGMARKER, PROF_UPDATE_SEQUENCE, PROF_KEY)
 		 VALUES (LPAD(TO_CHAR(EMPINST.CHG_EMP_DRAFT_SEQ1.NEXTVAL),20,'0'), LPAD(TO_CHAR(EMPINST.CHG_EMP_DRAFT_SEQ2.NEXTVAL),20,'0'), 'D', SYSDATE, :N.PROF_UPDATE_SEQUENCE, :N.PROF_KEY);
		END;
/

CREATE TRIGGER EMPINST."T_EMP_UPD" AFTER UPDATE ON EMPINST."EMP_DRAFT" REFERENCING NEW AS N 
	FOR EACH ROW 
		 BEGIN 
		 INSERT INTO EMPINST."CHG_EMP_DRAFT" (IBMSNAP_COMMITSEQ, IBMSNAP_INTENTSEQ, IBMSNAP_OPERATION,
                                                 IBMSNAP_LOGMARKER, PROF_UPDATE_SEQUENCE, PROF_KEY)
 		 VALUES (LPAD(TO_CHAR(EMPINST.CHG_EMP_DRAFT_SEQ1.NEXTVAL),20,'0'), LPAD(TO_CHAR(EMPINST.CHG_EMP_DRAFT_SEQ2.NEXTVAL),20,'0'), 'U', SYSDATE, :N.PROF_UPDATE_SEQUENCE, :N.PROF_KEY);
		END;
/

COMMIT;
QUIT;
