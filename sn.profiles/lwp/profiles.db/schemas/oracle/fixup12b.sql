-- ***************************************************************** 
--                                                                   
-- IBM Confidential                                                  
--                                                                   
-- OCO Source Materials                                              
--                                                                   
-- Copyright IBM Corp. 2001, 2010                                    
--                                                                   
-- The source code for this program is not published or otherwise    
-- divested of its trade secrets, irrespective of what has been      
-- deposited with the U.S. Copyright Office.                         
--                                                                   
-- ***************************************************************** 

-- 5724-S68                                                          
-- FIXUP12A.SQL AND MigrateEmployeeTable JAVA PROGRAM MUST BE RUN BEFORE THIS SCRIPT

{include.msgVector-postdbxfer.sql}

--- step 5: drop temp table

DROP TABLE EMPINST.EMPLOYEE_T;

--- step 6: create triggers/indices new table
--- keep the following stmts in sync with createdb.sql

CREATE INDEX EMPINST."EMP_GUID_IDX" ON EMPINST."EMPLOYEE" 
		("PROF_GUID" ASC) TABLESPACE PROFINDEXTABSPACE;
		
CREATE INDEX EMPINST."EMP_UID_IDX" ON EMPINST."EMPLOYEE" 
		("PROF_UID" ASC) TABLESPACE PROFINDEXTABSPACE;
		
CREATE INDEX EMPINST."MAIL_IDX" ON EMPINST."EMPLOYEE" 
		("PROF_MAIL" ASC) TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX EMPINST."MAIL_LOWER_IDX" ON EMPINST."EMPLOYEE" 
		("PROF_MAIL_LOWER" ASC) TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX EMPINST."UID_LOWER_IDX" ON EMPINST."EMPLOYEE" 
		("PROF_UID_LOWER" ASC) TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX EMPINST."GW_EMAIL_LOWER_IDX" ON EMPINST."EMPLOYEE" 
		("PROF_GW_EMAIL_LOWER" ASC) TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX EMPINST."PREF_FNX" ON EMPINST."EMPLOYEE" 
		("PROF_PREFERRED_FIRST_NAME" ASC) TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX EMPINST."PREF_LNX" ON EMPINST."EMPLOYEE" 
		("PROF_PREFERRED_LAST_NAME" ASC) TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX EMPINST."DISPNMX" ON EMPINST."EMPLOYEE"
		("PROF_DISPLAY_NAME" ASC) TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX EMPINST."MGRIDX" ON EMPINST."EMPLOYEE" 
		("PROF_MANAGER_UID" ASC) TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX EMPINST."GRPEMAIL_IDX" ON EMPINST."EMPLOYEE" 
		("PROF_GROUPWARE_EMAIL" ASC) TABLESPACE PROFINDEXTABSPACE;
		
CREATE INDEX EMPINST."JOB_RESP_UID_IDX" ON EMPINST."EMPLOYEE" 
		("PROF_JOB_RESPONSIBILITIES", "PROF_KEY") TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX EMPINST."ORG_UID_IDX" ON EMPINST."EMPLOYEE" 
		("PROF_ORGANIZATION_IDENTIFIER", "PROF_KEY") TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX EMPINST."COUNTRY_UID_IDX" ON EMPINST."EMPLOYEE" 
		("PROF_ISO_COUNTRY_CODE", "PROF_KEY") TABLESPACE PROFINDEXTABSPACE;
		
CREATE INDEX EMPINST."FAX_IDX" ON EMPINST."EMPLOYEE"
        ("PROF_FAX_TELEPHONE_NUMBER" ASC) TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX EMPINST."IPPHONE_IDX" ON EMPINST."EMPLOYEE"
        ("PROF_IP_TELEPHONE_NUMBER" ASC) TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX EMPINST."MOBILE_IDX" ON EMPINST."EMPLOYEE"
        ("PROF_MOBILE" ASC) TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX EMPINST."PAGER_IDX" ON EMPINST."EMPLOYEE"
        ("PROF_PAGER" ASC) TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX EMPINST."PHONE_IDX" ON EMPINST."EMPLOYEE"
        ("PROF_TELEPHONE_NUMBER" ASC) TABLESPACE PROFINDEXTABSPACE;
        
CREATE INDEX EMPINST."WORKLOC_IDX" ON EMPINST."EMPLOYEE"
        ("PROF_WORK_LOCATION" ASC) TABLESPACE PROFINDEXTABSPACE;        				
				
CREATE INDEX EMPINST."LOGIN_LOWER_IDX" ON EMPINST."EMPLOYEE" 
		("PROF_LOGIN_LOWER" ASC) TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX EMPINST."MANAGER_UID_LOWER_IDX" ON EMPINST."EMPLOYEE" 
		("PROF_MANAGER_UID_LOWER" ASC) TABLESPACE PROFINDEXTABSPACE;

CREATE INDEX "EMPINST"."PROFILE_SEARCH_IDX" ON "EMPINST"."EMPLOYEE"
        ("PROF_LAST_UPDATE" ASC, "PROF_KEY" ASC) TABLESPACE PROFINDEXTABSPACE;

--------------------------------------
-- CREATE THE TRIGGERS
--------------------------------------


CREATE TRIGGER EMPINST.T_EMPLOYEE_INSRT 
	BEFORE INSERT ON EMPINST.EMPLOYEE REFERENCING NEW AS N 
	FOR EACH ROW
		BEGIN 
			SELECT SYSTIMESTAMP INTO :N.PROF_LAST_UPDATE FROM DUAL;
			SELECT CASE :N.PROF_UID WHEN NULL THEN NULL ELSE LOWER(:N.PROF_UID) END INTO :N.PROF_UID_LOWER FROM DUAL;
			SELECT CASE :N.PROF_MAIL WHEN NULL THEN NULL ELSE LOWER(:N.PROF_MAIL) END INTO :N.PROF_MAIL_LOWER FROM DUAL;
			SELECT CASE :N.PROF_GROUPWARE_EMAIL WHEN NULL THEN NULL ELSE LOWER(:N.PROF_GROUPWARE_EMAIL) END INTO :N.PROF_GW_EMAIL_LOWER FROM DUAL;
			SELECT CASE :N.PROF_LOGIN WHEN NULL THEN NULL ELSE LOWER(:N.PROF_LOGIN) END INTO :N.PROF_LOGIN_LOWER FROM DUAL;
			SELECT CASE :N.PROF_MANAGER_UID WHEN NULL THEN NULL ELSE LOWER(:N.PROF_MANAGER_UID) END INTO :N.PROF_MANAGER_UID_LOWER FROM DUAL;
		END;
/

CREATE TRIGGER EMPINST."T_EMPLOYEE_UPDT" BEFORE UPDATE ON EMPINST."EMPLOYEE" REFERENCING NEW AS N 
	FOR EACH ROW
		BEGIN
		 SELECT SYSTIMESTAMP INTO :N.PROF_LAST_UPDATE FROM DUAL;
		END;
/

CREATE TRIGGER EMPINST."T_EMPLOYEE_UID_UPDT" BEFORE UPDATE OF PROF_UID ON EMPINST."EMPLOYEE" REFERENCING NEW AS N 
	FOR EACH ROW
		BEGIN
		 SELECT LOWER(:N.PROF_UID) INTO :N.PROF_UID_LOWER FROM DUAL;
		END;
/

CREATE TRIGGER EMPINST."T_EMPLOYEE_MAIL_UPDT" BEFORE UPDATE OF PROF_UID ON EMPINST."EMPLOYEE" REFERENCING NEW AS N 
	FOR EACH ROW
		BEGIN
		 SELECT LOWER(:N.PROF_MAIL) INTO :N.PROF_MAIL_LOWER FROM DUAL;
		END;
/

CREATE TRIGGER EMPINST."T_EMPLOYEE_GW_MAIL_UPDT" BEFORE UPDATE OF PROF_GROUPWARE_EMAIL ON EMPINST."EMPLOYEE" REFERENCING NEW AS N 
	FOR EACH ROW
		BEGIN
		 SELECT LOWER(:N.PROF_GROUPWARE_EMAIL) INTO :N.PROF_GW_EMAIL_LOWER FROM DUAL;
		END;
/

CREATE TRIGGER EMPINST."T_EMPLOYEE_LOGIN_UPDT" BEFORE UPDATE OF PROF_LOGIN ON EMPINST."EMPLOYEE" REFERENCING NEW AS N 
	FOR EACH ROW
		BEGIN
		 SELECT LOWER(:N.PROF_LOGIN) INTO :N.PROF_LOGIN_LOWER FROM DUAL;
		END;
/

CREATE TRIGGER EMPINST."T_EMPLOYEE_MANAGER_UID_UPDT" BEFORE UPDATE OF PROF_MANAGER_UID ON EMPINST."EMPLOYEE" REFERENCING NEW AS N 
	FOR EACH ROW
		BEGIN
		 SELECT LOWER(:N.PROF_MANAGER_UID) INTO :N.PROF_MANAGER_UID_LOWER FROM DUAL;
		END;
/



------------------------------------------------
-- DDL Statements for view "EMPINST"."SNCORE_PERSON"
------------------------------------------------

CREATE VIEW EMPINST.SNCORE_PERSON (SNC_INTERNAL_ID, SNC_IDKEY, SNC_EMAIL_LOWER, SNC_DISPLAY_NAME)
  	AS SELECT PROF_KEY, PROF_GUID, PROF_MAIL_LOWER, PROF_DISPLAY_NAME FROM EMPINST.EMPLOYEE;


------------------------------------------------
-- DDL Statements for view "EMPINST"."PROFILE_LOGIN"
------------------------------------------------

CREATE TABLE EMPINST.PROFILE_LOGIN (
	"PROF_KEY" 				VARCHAR2(36) NOT NULL, 
	"PROF_LOGIN"				VARCHAR2(256) NOT NULL, 
	CONSTRAINT "LOGIN_PK" PRIMARY KEY ("PROF_KEY", "PROF_LOGIN")
) TABLESPACE PROFREGTABSPACE ;

CREATE UNIQUE INDEX "EMPINST"."LOGIN_UDX" ON EMPINST.PROFILE_LOGIN ("PROF_LOGIN")
	TABLESPACE PROFINDEXTABSPACE;


------------------------------------------------
-- DDL Statements for table "EMPINST"."SNPROF_SCHEMA"
------------------------------------------------


ALTER TABLE "EMPINST"."SNPROF_SCHEMA" ADD "RELEASEVER" VARCHAR2(32);


UPDATE EMPINST.SNPROF_SCHEMA SET DBSCHEMAVER= 12 WHERE COMPKEY='Profiles';
UPDATE EMPINST.SNPROF_SCHEMA SET RELEASEVER= '2.5.0.0' WHERE COMPKEY='Profiles';

ALTER TABLE "EMPINST"."SNPROF_SCHEMA" MODIFY "RELEASEVER" NOT NULL;

COMMIT;

QUIT;
