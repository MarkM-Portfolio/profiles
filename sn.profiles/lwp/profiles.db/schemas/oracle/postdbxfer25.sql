-- ***************************************************************** 
--                                                                   
-- IBM Confidential                                                  
--                                                                   
-- OCO Source Materials                                              
--                                                                   
-- Copyright IBM Corp. 2001, 2010                                    
--                                                                   
-- The source code for this program is not published or otherwise    
-- divested of its trade secrets, irrespective of what has been      
-- deposited with the U.S. Copyright Office.                         
--                                                                   
-- ***************************************************************** 

-- 5724-S68                                                          
-- CREATE THE TRIGGERS
--------------------------------------
CREATE TRIGGER EMPINST."T_EXT_DRAFT_SEQ" BEFORE INSERT ON EMPINST."PROFILE_EXT_DRAFT" REFERENCING NEW AS N 
	FOR EACH ROW
		BEGIN
		 SELECT EMPINST.EXT_DRAFT_SEQ.NEXTVAL INTO :N.PROF_UPDATE_SEQUENCE FROM DUAL;
		END;
/



CREATE TRIGGER EMPINST.T_EMPLOYEE_INSRT 
	BEFORE INSERT ON EMPINST.EMPLOYEE REFERENCING NEW AS N 
	FOR EACH ROW
		BEGIN 
			SELECT SYSTIMESTAMP INTO :N.PROF_LAST_UPDATE FROM DUAL;
			SELECT CASE :N.PROF_UID WHEN NULL THEN NULL ELSE LOWER(:N.PROF_UID) END INTO :N.PROF_UID_LOWER FROM DUAL;
			SELECT CASE :N.PROF_MAIL WHEN NULL THEN NULL ELSE LOWER(:N.PROF_MAIL) END INTO :N.PROF_MAIL_LOWER FROM DUAL;
			SELECT CASE :N.PROF_GROUPWARE_EMAIL WHEN NULL THEN NULL ELSE LOWER(:N.PROF_GROUPWARE_EMAIL) END INTO :N.PROF_GW_EMAIL_LOWER FROM DUAL;
			SELECT CASE :N.PROF_LOGIN WHEN NULL THEN NULL ELSE LOWER(:N.PROF_LOGIN) END INTO :N.PROF_LOGIN_LOWER FROM DUAL;
			SELECT CASE :N.PROF_MANAGER_UID WHEN NULL THEN NULL ELSE LOWER(:N.PROF_MANAGER_UID) END INTO :N.PROF_MANAGER_UID_LOWER FROM DUAL;
		END;
/

CREATE TRIGGER EMPINST."T_EMPLOYEE_UPDT" BEFORE UPDATE ON EMPINST."EMPLOYEE" REFERENCING NEW AS N 
	FOR EACH ROW
		BEGIN
		 SELECT SYSTIMESTAMP INTO :N.PROF_LAST_UPDATE FROM DUAL;
		END;
/

CREATE TRIGGER EMPINST."T_EMPLOYEE_UID_UPDT" BEFORE UPDATE OF PROF_UID ON EMPINST."EMPLOYEE" REFERENCING NEW AS N 
	FOR EACH ROW
		BEGIN
		 SELECT LOWER(:N.PROF_UID) INTO :N.PROF_UID_LOWER FROM DUAL;
		END;
/

CREATE TRIGGER EMPINST."T_EMPLOYEE_MAIL_UPDT" BEFORE UPDATE OF PROF_UID ON EMPINST."EMPLOYEE" REFERENCING NEW AS N 
	FOR EACH ROW
		BEGIN
		 SELECT LOWER(:N.PROF_MAIL) INTO :N.PROF_MAIL_LOWER FROM DUAL;
		END;
/

CREATE TRIGGER EMPINST."T_EMPLOYEE_GW_MAIL_UPDT" BEFORE UPDATE OF PROF_GROUPWARE_EMAIL ON EMPINST."EMPLOYEE" REFERENCING NEW AS N 
	FOR EACH ROW
		BEGIN
		 SELECT LOWER(:N.PROF_GROUPWARE_EMAIL) INTO :N.PROF_GW_EMAIL_LOWER FROM DUAL;
		END;
/

CREATE TRIGGER EMPINST."T_EMPLOYEE_LOGIN_UPDT" BEFORE UPDATE OF PROF_LOGIN ON EMPINST."EMPLOYEE" REFERENCING NEW AS N 
	FOR EACH ROW
		BEGIN
		 SELECT LOWER(:N.PROF_LOGIN) INTO :N.PROF_LOGIN_LOWER FROM DUAL;
		END;
/

CREATE TRIGGER EMPINST."T_EMPLOYEE_MANAGER_UID_UPDT" BEFORE UPDATE OF PROF_MANAGER_UID ON EMPINST."EMPLOYEE" REFERENCING NEW AS N 
	FOR EACH ROW
		BEGIN
		 SELECT LOWER(:N.PROF_MANAGER_UID) INTO :N.PROF_MANAGER_UID_LOWER FROM DUAL;
		END;
/

CREATE TRIGGER EMPINST."T_PHOTO_INSRT" BEFORE INSERT ON EMPINST."PHOTO" REFERENCING NEW AS N 
	FOR EACH ROW
		BEGIN
		 SELECT SYSTIMESTAMP INTO :N.PROF_UPDATED FROM DUAL;
		END;
/

CREATE TRIGGER EMPINST."T_PHOTO_UPDT" BEFORE UPDATE ON EMPINST."PHOTO" REFERENCING NEW AS N 
	FOR EACH ROW 
		BEGIN
		 SELECT SYSTIMESTAMP INTO :N.PROF_UPDATED FROM DUAL;
		END;
/


CREATE TRIGGER EMPINST."T_PRONOUNCE_INSRT" BEFORE INSERT ON EMPINST."PRONUNCIATION" REFERENCING NEW AS N 
	FOR EACH ROW 
		BEGIN 
		 SELECT SYSTIMESTAMP INTO :N.PROF_UPDATED FROM DUAL;
		END;
/

CREATE TRIGGER EMPINST."T_PRONOUNCE_UPDT" BEFORE UPDATE ON EMPINST."PRONUNCIATION" REFERENCING NEW AS N 
	FOR EACH ROW
		BEGIN
		 SELECT SYSTIMESTAMP INTO :N.PROF_UPDATED FROM DUAL;
		END;
/


CREATE TRIGGER EMPINST."T_EMP_DRAFT_SEQ" BEFORE INSERT ON EMPINST."EMP_DRAFT" REFERENCING NEW AS N 
	FOR EACH ROW 
		BEGIN
		 SELECT EMPINST.EMP_DRAFT_SEQ.NEXTVAL INTO :N.PROF_UPDATE_SEQUENCE FROM DUAL;
		END;
/


CREATE TRIGGER EMPINST."T_EMP_INS" AFTER INSERT ON EMPINST."EMP_DRAFT" REFERENCING NEW AS N 
	FOR EACH ROW
		BEGIN 
		 INSERT INTO EMPINST."CHG_EMP_DRAFT" (IBMSNAP_COMMITSEQ, IBMSNAP_INTENTSEQ, IBMSNAP_OPERATION,
                                                 IBMSNAP_LOGMARKER, PROF_UPDATE_SEQUENCE, PROF_KEY)
 		 VALUES (LPAD(TO_CHAR(EMPINST.CHG_EMP_DRAFT_SEQ1.NEXTVAL),20,'0'), LPAD(TO_CHAR(EMPINST.CHG_EMP_DRAFT_SEQ2.NEXTVAL),20,'0'), 'I', SYSDATE, :N.PROF_UPDATE_SEQUENCE, :N.PROF_KEY);
		END;
/
		 

CREATE TRIGGER EMPINST."T_EMP_DEL" AFTER DELETE ON EMPINST."EMP_DRAFT" REFERENCING OLD AS N 
	FOR EACH ROW 
		 BEGIN 
		 INSERT INTO EMPINST."CHG_EMP_DRAFT" (IBMSNAP_COMMITSEQ, IBMSNAP_INTENTSEQ, IBMSNAP_OPERATION,
                                                 IBMSNAP_LOGMARKER, PROF_UPDATE_SEQUENCE, PROF_KEY)
 		 VALUES (LPAD(TO_CHAR(EMPINST.CHG_EMP_DRAFT_SEQ1.NEXTVAL),20,'0'), LPAD(TO_CHAR(EMPINST.CHG_EMP_DRAFT_SEQ2.NEXTVAL),20,'0'), 'D', SYSDATE, :N.PROF_UPDATE_SEQUENCE, :N.PROF_KEY);
		END;
/

CREATE TRIGGER EMPINST."T_EMP_UPD" AFTER UPDATE ON EMPINST."EMP_DRAFT" REFERENCING NEW AS N 
	FOR EACH ROW 
		 BEGIN 
		 INSERT INTO EMPINST."CHG_EMP_DRAFT" (IBMSNAP_COMMITSEQ, IBMSNAP_INTENTSEQ, IBMSNAP_OPERATION,
                                                 IBMSNAP_LOGMARKER, PROF_UPDATE_SEQUENCE, PROF_KEY)
 		 VALUES (LPAD(TO_CHAR(EMPINST.CHG_EMP_DRAFT_SEQ1.NEXTVAL),20,'0'), LPAD(TO_CHAR(EMPINST.CHG_EMP_DRAFT_SEQ2.NEXTVAL),20,'0'), 'U', SYSDATE, :N.PROF_UPDATE_SEQUENCE, :N.PROF_KEY);
		END;
/

--------------------------------------
-- Stuff for the wall
--------------------------------------
{include.msgVector-postdbxfer25.sql}

COMMIT;
QUIT;
