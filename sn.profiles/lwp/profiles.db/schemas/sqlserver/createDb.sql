-- ***************************************************************** 
--                                                                   
-- HCL Confidential
--                                                                   
-- OCO Source Materials
--                                                                   
-- Copyright HCL Technologies Limited 2007, 2022
--                                                                   
-- The source code for this program is not published or otherwise    
-- divested of its trade secrets, irrespective of what has been      
-- deposited with the U.S. Copyright Office.                         
--                                                                   
-- ***************************************************************** 

-- 5724-S68                                                          
-- CREATE THE DATABASE
--------------------------------------
-- this won't work unless the path already exists
--
CREATE DATABASE PEOPLEDB 
  ON PRIMARY 
  (NAME=N'PEOPLEDB_DATA1',FILENAME='$(filepath)\PEOPLEDB_DATA1.mdf',SIZE=100MB,MAXSIZE=UNLIMITED,FILEGROWTH=20MB) 
  LOG ON 
  (NAME=N'PEOPLEDB_LOG',FILENAME='$(filepath)\PEOPLEDB_LOG',SIZE=5MB,MAXSIZE=UNLIMITED,FILEGROWTH=5MB)
  COLLATE Latin1_General_BIN;
GO

USE PEOPLEDB;
GO
ALTER DATABASE PEOPLEDB SET SINGLE_USER;
ALTER DATABASE PEOPLEDB SET READ_COMMITTED_SNAPSHOT ON;
ALTER DATABASE PEOPLEDB SET ALLOW_SNAPSHOT_ISOLATION ON;
ALTER DATABASE PEOPLEDB SET MULTI_USER;
GO

--------------------------------------
-- CONNECT TO PEOPLEDB
--------------------------------------
USE PEOPLEDB
GO

--------------------------------------
-- CREATE THE SCHEMA
-- The CREATE SCHEMA command must be the first statement in a query batch, that is, must right after GO command
--------------------------------------

CREATE SCHEMA EMPINST AUTHORIZATION dbo;
GO

-- create user
USE PEOPLEDB;
GO
CREATE ROLE PROFUSER_ROLE;
CREATE LOGIN PROFUSER WITH PASSWORD = '$(password)', DEFAULT_DATABASE = PEOPLEDB;
-- schema not in quotes
CREATE USER PROFUSER FOR LOGIN PROFUSER WITH DEFAULT_SCHEMA = EMPINST;
GO 

--------------------------------------
-- CREATE THE TABLES
--------------------------------------
------------------------------------------------
-- DDL Statements for table "EMPINST"."SNCOMM_SCHEMA"
------------------------------------------------

CREATE TABLE EMPINST.SNPROF_SCHEMA (
	COMPKEY			NVARCHAR(36) NOT NULL,
	DBSCHEMAVER		INTEGER NOT NULL,
	PRESCHEMAVER	NVARCHAR(10) DEFAULT '0' NOT NULL,
	POSTSCHEMAVER	NVARCHAR(10) DEFAULT '0' NOT NULL,
	RELEASEVER		NVARCHAR(36) NOT NULL
);
GO

INSERT INTO EMPINST.SNPROF_SCHEMA (COMPKEY, DBSCHEMAVER, POSTSCHEMAVER, RELEASEVER) VALUES ('Profiles', 56, '56.0', '8.0.0.0');

------------------------------------------------
-- DDL Statements for table "EMPINST"."TENANT"
------------------------------------------------

CREATE TABLE EMPINST.TENANT  (
	TENANT_KEY		NVARCHAR(36)	NOT NULL,
	TENANT_EXID		NVARCHAR(256)	NOT NULL,
	TENANT_NAME		NVARCHAR(256)	NOT NULL,
	TENANT_NAME_LOWER	NVARCHAR(256)	NOT NULL,
	TENANT_STATE		NUMERIC(19,0)	NOT NULL,
	TENANT_CREATED		DATETIME		NOT NULL,
	--TENANT_CREATED_BY_KEY	NVARCHAR(36) NOT NULL,
	TENANT_LASTUPDATE	DATETIME		NOT NULL
	--TENANT_LASTMOD_BY_KEY NVARCHAR(36) NOT NULL
);
GO

ALTER TABLE EMPINST.TENANT ADD CONSTRAINT TENANT_PK PRIMARY KEY (TENANT_KEY);
GO

CREATE UNIQUE INDEX TENANT_EXID_UDX ON EMPINST.TENANT (TENANT_EXID ASC);
GO

INSERT INTO EMPINST.TENANT(
	TENANT_KEY           ,
	TENANT_EXID          ,
	TENANT_NAME          ,
	TENANT_NAME_LOWER    ,
	TENANT_STATE         ,
	TENANT_CREATED       ,
	--TENANT_CREATED_BY_KEY,
	TENANT_LASTUPDATE
	--TENANT_LASTMOD_BY_KEY
)
VALUES(
	'a',
	'a',
	'Default Tenant',
	'default tenant',
	0,
	CURRENT_TIMESTAMP,
	-- no admin,
	CURRENT_TIMESTAMP
	-- no admin
);
GO

------------------------------------------------
-- DDL Statements for table EMPINST.EMPLOYEE
------------------------------------------------
 
CREATE TABLE EMPINST.EMPLOYEE  (
	PROF_KEY 			NVARCHAR(36) NOT NULL,
	PROF_UID 			NVARCHAR(256) NOT NULL,
	PROF_UID_LOWER		NVARCHAR(256) NOT NULL,
	PROF_IDHASH			NVARCHAR(256) DEFAULT '?' NOT NULL,
	PROF_LAST_UPDATE 	DATETIME NOT NULL,

	PROF_MAIL 			NVARCHAR(256) ,
	PROF_MAIL_LOWER 	NVARCHAR(256) ,
	PROF_GUID 			NVARCHAR(256) NOT NULL,
	PROF_SOURCE_UID 	NVARCHAR(256) NOT NULL,

	PROF_DISPLAY_NAME 	NVARCHAR(256) ,
	PROF_LOGIN 			NVARCHAR(256),
	PROF_LOGIN_LOWER	NVARCHAR(256) ,
	PROF_GIVEN_NAME		NVARCHAR(128)  ,
	PROF_SURNAME		NVARCHAR(128)  ,
	PROF_ALTERNATE_LAST_NAME	NVARCHAR(64) ,
	PROF_PREFERRED_FIRST_NAME	NVARCHAR(32) ,
	PROF_PREFERRED_LAST_NAME	NVARCHAR(64) ,
	PROF_TYPE			NVARCHAR(64)  ,

	PROF_MANAGER_UID 		NVARCHAR(256) ,
	PROF_MANAGER_UID_LOWER		NVARCHAR(256) ,
	PROF_SECRETARY_UID 		NVARCHAR(256) ,
	PROF_IS_MANAGER 		NCHAR(1) ,

	PROF_GROUPWARE_EMAIL 		NVARCHAR(256) ,
	PROF_GW_EMAIL_LOWER 		NVARCHAR(256) ,
	PROF_JOB_RESPONSIBILITIES 	NVARCHAR(128) ,
	PROF_ORGANIZATION_IDENTIFIER	NVARCHAR(64) ,
	PROF_ISO_COUNTRY_CODE 		NVARCHAR(3) ,
	PROF_FAX_TELEPHONE_NUMBER	NVARCHAR(32) ,
	PROF_IP_TELEPHONE_NUMBER	NVARCHAR(32) ,
	PROF_MOBILE			NVARCHAR(32) ,
	PROF_PAGER			NVARCHAR(32) ,
	PROF_TELEPHONE_NUMBER	 	NVARCHAR(32) ,
	PROF_WORK_LOCATION		NVARCHAR(32) ,

	PROF_BUILDING_IDENTIFIER	NVARCHAR(64) ,
	PROF_DEPARTMENT_NUMBER		NVARCHAR(24) ,
	PROF_EMPLOYEE_TYPE			NVARCHAR(256) ,
	PROF_FLOOR					NVARCHAR(16) ,
	PROF_EMPLOYEE_NUMBER		NVARCHAR(16) ,
	PROF_PAGER_TYPE 			NVARCHAR(16) ,
	PROF_PAGER_ID 				NVARCHAR(32) ,
	PROF_PAGER_SERVICE_PROVIDER		NVARCHAR(50) ,
	PROF_PHYSICAL_DELIVERY_OFFICE	NVARCHAR(64) ,
	PROF_PREFERRED_LANGUAGE		NVARCHAR(100) ,
	PROF_SHIFT				NVARCHAR(4) ,
	PROF_TITLE				NVARCHAR(256) ,
	PROF_COURTESY_TITLE		NVARCHAR(64) ,
	PROF_TIMEZONE			NVARCHAR(64) , 
	PROF_NATIVE_LAST_NAME	NVARCHAR(256) ,
	PROF_NATIVE_FIRST_NAME	NVARCHAR(256) ,
	PROF_BLOG_URL			NVARCHAR(256) ,
	PROF_FREEBUSY_URL		NVARCHAR(256) ,
	PROF_CALENDAR_URL		NVARCHAR(256) ,

	PROF_DESCRIPTION 		NVARCHAR(max) ,
	PROF_EXPERIENCE 		NVARCHAR(max) ,
	PROF_SOURCE_URL 		NVARCHAR(512) ,
	PROF_SRC_UID_LOWER 		NVARCHAR(256) NOT NULL,
	TENANT_KEY 				NVARCHAR(36) DEFAULT '00000000-0000-0000-0000-040508202233' NOT NULL,
	H_TENANT_KEY 				NVARCHAR(36) DEFAULT '00000000-0000-0000-0000-040508202233' NOT NULL,
	PROF_STATE				INTEGER DEFAULT 0 NOT NULL,
	PROF_MODE				NUMERIC(5, 0) DEFAULT 0 NOT NULL
);
GO

-- DDL Statements for indexes on Table EMPINST.EMPLOYEE

ALTER TABLE EMPINST.EMPLOYEE ADD CONSTRAINT EMPLOYEE_PK PRIMARY KEY (PROF_KEY, TENANT_KEY);
GO

CREATE UNIQUE INDEX EMP_GUID_UDX ON EMPINST.EMPLOYEE 
		(PROF_GUID ASC, TENANT_KEY);
GO

CREATE INDEX MAIL_LOWER_IDX ON EMPINST.EMPLOYEE 
		(PROF_MAIL_LOWER ASC, TENANT_KEY);
GO

CREATE UNIQUE INDEX UID_LOWER_UDX ON EMPINST.EMPLOYEE 
		(PROF_UID_LOWER ASC, TENANT_KEY);
GO

CREATE INDEX IDHASH_UDX ON EMPINST.EMPLOYEE 
		(PROF_IDHASH ASC, TENANT_KEY);
GO

CREATE INDEX DISPNMX ON EMPINST.EMPLOYEE 
		(PROF_DISPLAY_NAME ASC, TENANT_KEY);
GO

CREATE INDEX PROF_DISP_IDX ON EMPINST.EMPLOYEE 
		(PROF_KEY ASC, PROF_DISPLAY_NAME ASC, TENANT_KEY) INCLUDE (PROF_SURNAME, PROF_GIVEN_NAME);
GO

CREATE INDEX PROF_SNGN_IDX ON EMPINST.EMPLOYEE 
		(PROF_KEY ASC, PROF_SURNAME ASC, PROF_GIVEN_NAME ASC, TENANT_KEY);
GO

CREATE INDEX PROF_GN2_IDX ON EMPINST.EMPLOYEE 
		(PROF_GIVEN_NAME ASC, PROF_KEY ASC, TENANT_KEY);
GO

CREATE INDEX PROF_SN2_IDX ON EMPINST.EMPLOYEE 
		(PROF_SURNAME ASC, PROF_KEY ASC, TENANT_KEY);
GO
                           
CREATE INDEX LOGIN_LOWER_IDX ON EMPINST.EMPLOYEE
		(PROF_LOGIN_LOWER ASC, TENANT_KEY);
GO

CREATE INDEX MANAGER_UID_LOWER_IDX ON EMPINST.EMPLOYEE
		(PROF_MANAGER_UID_LOWER ASC, TENANT_KEY);
GO

CREATE INDEX PROFILE_SEARCH_IDX ON EMPINST.EMPLOYEE
		(PROF_LAST_UPDATE ASC, PROF_KEY ASC, TENANT_KEY);
GO

CREATE INDEX PROF_TYPE_IDX ON EMPINST.EMPLOYEE
		(PROF_TYPE ASC, TENANT_KEY);
GO

CREATE INDEX SRC_UID_LOWER_IDX ON EMPINST.EMPLOYEE
		(PROF_SRC_UID_LOWER ASC, PROF_KEY ASC, TENANT_KEY);
GO

CREATE INDEX PROF_SRC_UID_IDX ON EMPINST.EMPLOYEE
		(PROF_SOURCE_UID ASC, TENANT_KEY);
GO

CREATE INDEX PROF_MODE ON EMPINST.EMPLOYEE 
		(PROF_MODE ASC, TENANT_KEY);
GO

------------------------------------------------
-- DDL Statements for table EMPINST.GIVEN_NAME
------------------------------------------------
 
 CREATE TABLE EMPINST.GIVEN_NAME  (
	PROF_KEY		NVARCHAR(36) NOT NULL , 
	PROF_GIVENNAME		NVARCHAR(128) NOT NULL,
	PROF_NAME_SOURCE	NUMERIC(19,0) DEFAULT 0,
	PROF_USRSTATE		INTEGER DEFAULT 0 NOT NULL,
	PROF_MODE		NUMERIC(5, 0) DEFAULT 0 NOT NULL,
	TENANT_KEY		NVARCHAR(36) DEFAULT '00000000-0000-0000-0000-040508202233' NOT NULL
);
GO

ALTER TABLE EMPINST.GIVEN_NAME ADD CONSTRAINT GIVEN_NAME_PK PRIMARY KEY (PROF_KEY, PROF_GIVENNAME, TENANT_KEY);
GO

CREATE INDEX GIVEN_NAME_IDX ON EMPINST.GIVEN_NAME (PROF_GIVENNAME ASC, PROF_KEY ASC, PROF_USRSTATE ASC, PROF_MODE ASC, TENANT_KEY);
GO

CREATE INDEX GIVEN_NAME_IDX2 ON EMPINST.GIVEN_NAME (PROF_USRSTATE ASC, PROF_MODE ASC, PROF_GIVENNAME ASC, PROF_KEY ASC, TENANT_KEY);
GO

CREATE INDEX GIVEN_NAMEX ON EMPINST.GIVEN_NAME (PROF_KEY ASC, PROF_GIVENNAME ASC, PROF_USRSTATE ASC, PROF_MODE ASC, TENANT_KEY);
GO

------------------------------------------------
-- DDL Statements for table EMPINST.SURNAME
------------------------------------------------
 
CREATE TABLE EMPINST.SURNAME  (
	PROF_KEY 		NVARCHAR(36) NOT NULL , 
	PROF_SURNAME 		NVARCHAR(128) NOT NULL,
	PROF_NAME_SOURCE	NUMERIC(19,0) DEFAULT 0,
	PROF_USRSTATE		INTEGER DEFAULT 0 NOT NULL,
	PROF_MODE		NUMERIC(5, 0) DEFAULT 0 NOT NULL,
	TENANT_KEY		NVARCHAR(36) DEFAULT '00000000-0000-0000-0000-040508202233' NOT NULL
);
GO

ALTER TABLE EMPINST.SURNAME ADD CONSTRAINT SURNAME_PK PRIMARY KEY (PROF_KEY, PROF_SURNAME, TENANT_KEY);
GO

CREATE INDEX SURNAME_IDX ON EMPINST.SURNAME (PROF_SURNAME ASC, PROF_KEY ASC, PROF_USRSTATE ASC, PROF_MODE ASC, TENANT_KEY);
GO

CREATE INDEX SURNAME_IDX2 ON EMPINST.SURNAME (PROF_USRSTATE ASC, PROF_MODE ASC, PROF_SURNAME ASC, PROF_KEY ASC, TENANT_KEY);
GO

CREATE INDEX SURNAMEX ON EMPINST.SURNAME (PROF_KEY ASC, PROF_SURNAME ASC, PROF_USRSTATE ASC, PROF_MODE ASC, TENANT_KEY);
GO
 		 
------------------------------------------------
-- DDL Statements for table EMPINST.PROFILE_EXTENSIONS
------------------------------------------------
 
CREATE TABLE EMPINST.PROFILE_EXTENSIONS  (
	  PROF_KEY 		NVARCHAR(36) NOT NULL ,
	  PROF_PROPERTY_ID 	NVARCHAR(64) NOT NULL,  
	  PROF_EXT_KEY 		NVARCHAR(256) ,
	  PROF_NAME 		NVARCHAR(256) ,
	  PROF_DATA_TYPE 	NVARCHAR(64) ,   
	  PROF_VALUE 		NVARCHAR(1024),
	  SUPPORT_LABEL		NUMERIC(5, 0) DEFAULT 0 NOT NULL,
	  PROF_VALUE_EXTENDED 	VARBINARY(max),
	  TENANT_KEY		NVARCHAR(36) DEFAULT '00000000-0000-0000-0000-040508202233' NOT NULL
);
GO

ALTER TABLE EMPINST.PROFILE_EXTENSIONS ADD CONSTRAINT PROF_EXT_PK PRIMARY KEY (PROF_KEY, PROF_PROPERTY_ID, TENANT_KEY);
GO

CREATE INDEX PROFILE_EXTENSIONS_IDX ON EMPINST.PROFILE_EXTENSIONS 
		(PROF_KEY ASC, TENANT_KEY);
GO

CREATE INDEX PROFILE_EXTENSIONS_IDX2 ON EMPINST.PROFILE_EXTENSIONS 
		(PROF_NAME ASC, PROF_PROPERTY_ID ASC, TENANT_KEY);
GO

------------------------------------------------
-- DDL Statements for sequence for Table EMPINST.PROFILE_EXT_DRAFT
------------------------------------------------

CREATE TABLE EMPINST.PROFILE_EXT_DRAFT  (
	PROF_UPDATE_SEQUENCE	NUMERIC(19,0) IDENTITY NOT NULL,
	PROF_KEY		NVARCHAR(36) NOT NULL ,
	PROF_PROPERTY_ID	NVARCHAR(64)  NOT NULL ,  
	PROF_EXT_KEY		NVARCHAR(256),
	PROF_NAME		NVARCHAR(256) ,
	PROF_DATA_TYPE		NVARCHAR(64) ,   
	PROF_VALUE		NVARCHAR(1024),
	PROF_VALUE_EXTENDED	VARBINARY(max),
	TENANT_KEY		NVARCHAR(36) DEFAULT '00000000-0000-0000-0000-040508202233' NOT NULL
);
GO

ALTER TABLE EMPINST.PROFILE_EXT_DRAFT ADD CONSTRAINT EXT_DRAFT_PK PRIMARY KEY (PROF_KEY, PROF_UPDATE_SEQUENCE, TENANT_KEY);
GO

------------------------------------------------
-- DDL Statements for table EMPINST.PEOPLE_TAG
------------------------------------------------

CREATE TABLE EMPINST.PEOPLE_TAG (
	PROF_TAG_ID		NVARCHAR(36) NOT NULL,
	PROF_SOURCE_KEY		NVARCHAR(36) NOT NULL,
	PROF_TARGET_KEY		NVARCHAR(36) NOT NULL,
	PROF_TAG		NVARCHAR(256) NOT NULL,
	PROF_TYPE		NVARCHAR(36) DEFAULT 'general' NOT NULL,
	TENANT_KEY		NVARCHAR(36) DEFAULT '00000000-0000-0000-0000-040508202233' NOT NULL
);
GO

ALTER TABLE EMPINST.PEOPLE_TAG ADD CONSTRAINT PEOPLE_TAG_PK PRIMARY KEY (PROF_TAG_ID, TENANT_KEY);
GO

CREATE INDEX PEOPLE_TAG_IDX ON EMPINST.PEOPLE_TAG 
		(PROF_TAG ASC, PROF_TARGET_KEY ASC, TENANT_KEY) ;
GO

CREATE INDEX PEOPLE_TAG_IDX2 ON EMPINST.PEOPLE_TAG 
		(PROF_TARGET_KEY ASC, PROF_TAG ASC, PROF_SOURCE_KEY ASC, TENANT_KEY);
GO

CREATE INDEX PEOPLE_TAG_IDX3 ON EMPINST.PEOPLE_TAG 
		(PROF_TAG ASC, PROF_TYPE ASC, TENANT_KEY) ;
GO

CREATE UNIQUE INDEX PEOPLE_TAG_UDX ON EMPINST.PEOPLE_TAG 
		(PROF_SOURCE_KEY ASC, PROF_TARGET_KEY ASC, PROF_TAG ASC, PROF_TYPE ASC, TENANT_KEY) ;
GO

------------------------------------------------
-- DDL Statements for table EMPINST.DEPARTMENT
------------------------------------------------
 
CREATE TABLE EMPINST.DEPARTMENT  (
	PROF_DEPARTMENT_CODE 	NVARCHAR(24) NOT NULL, 
	PROF_DEPARTMENT_TITLE 	NVARCHAR(256),
	TENANT_KEY		NVARCHAR(36) DEFAULT '00000000-0000-0000-0000-040508202233' NOT NULL
); 
GO

ALTER TABLE EMPINST.DEPARTMENT ADD CONSTRAINT DEPARTMENT_PK PRIMARY KEY (PROF_DEPARTMENT_CODE ASC, TENANT_KEY);
GO

------------------------------------------------
-- DDL Statements for table EMPINST.ORGANIZATION
------------------------------------------------
 
 CREATE TABLE EMPINST.ORGANIZATION  (
	PROF_ORGANIZATION_CODE	NVARCHAR(64) NOT NULL, 
	PROF_ORGANIZATION_TITLE	NVARCHAR(256),
	TENANT_KEY		NVARCHAR(36) DEFAULT '00000000-0000-0000-0000-040508202233' NOT NULL
); 
GO

ALTER TABLE EMPINST.ORGANIZATION ADD CONSTRAINT ORG_PK PRIMARY KEY (PROF_ORGANIZATION_CODE, TENANT_KEY);
GO

------------------------------------------------
-- DDL Statements for table EMPINST.COUNTRY
------------------------------------------------

CREATE TABLE EMPINST.COUNTRY  (
	PROF_ISO_COUNTRY_CODE	NVARCHAR(3) NOT NULL, 
	PROF_COUNTRY_DESC	NVARCHAR(256),
	TENANT_KEY		NVARCHAR(36) DEFAULT '00000000-0000-0000-0000-040508202233' NOT NULL
);
GO

ALTER TABLE EMPINST.COUNTRY ADD CONSTRAINT COUNTRY_PK PRIMARY KEY (PROF_ISO_COUNTRY_CODE, TENANT_KEY);
GO

------------------------------------------------
-- DDL Statements for table EMPINST.EMP_TYPE
------------------------------------------------
 
 CREATE TABLE EMPINST.EMP_TYPE  (
	PROF_EMPLOYEE_TYPE	NVARCHAR(256) NOT NULL, 
	PROF_EMPLOYEE_DESC	NVARCHAR(256),
	TENANT_KEY		NVARCHAR(36) DEFAULT '00000000-0000-0000-0000-040508202233' NOT NULL
);
GO

ALTER TABLE EMPINST.EMP_TYPE ADD CONSTRAINT EMPTYPE_PK PRIMARY KEY (PROF_EMPLOYEE_TYPE, TENANT_KEY);
GO

------------------------------------------------
-- DDL Statements for table EMPINST.PHOTO
------------------------------------------------
 
CREATE TABLE EMPINST.PHOTO  (
	PROF_KEY 	NVARCHAR(36) NOT NULL , 
	PROF_FILE_TYPE	NVARCHAR(50) , 
	PROF_UPDATED	DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL,
	PROF_IMAGE	VARBINARY(max),
	PROF_THUMBNAIL	VARBINARY(max),
	TENANT_KEY	NVARCHAR(36) DEFAULT '00000000-0000-0000-0000-040508202233' NOT NULL
); 
GO

ALTER TABLE EMPINST.PHOTO ADD CONSTRAINT PHOTO_PK PRIMARY KEY (PROF_KEY, TENANT_KEY);
GO

CREATE INDEX PHOTOIDX ON EMPINST.PHOTO 
		(PROF_UPDATED DESC, TENANT_KEY);
GO

CREATE TABLE EMPINST.PHOTOBKUP  (
	PROF_KEY 	NVARCHAR(36) NOT NULL , 
	PROF_FILE_TYPE	NVARCHAR(50) , 
	PROF_UPDATED	DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL,
	PROF_IMAGE	VARBINARY(max),
	PROF_THUMBNAIL	VARBINARY(max),
	TENANT_KEY	NVARCHAR(36) DEFAULT '00000000-0000-0000-0000-040508202233' NOT NULL
); 
GO

ALTER TABLE EMPINST.PHOTOBKUP ADD CONSTRAINT PHOTOBK_PK PRIMARY KEY (PROF_KEY, TENANT_KEY);
GO

CREATE TABLE EMPINST.PHOTO_GUID  (
	PROF_GUID	NVARCHAR(36) NOT NULL , 
	PROF_FILE_TYPE	NVARCHAR(50) , 
	PROF_UPDATED	DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL,
	PROF_IMAGE	VARBINARY(max),
	PROF_THUMBNAIL	VARBINARY(max),
	H_TENANT_KEY	NVARCHAR(36) DEFAULT '00000000-0000-0000-0000-040508202233' NOT NULL
);
GO

ALTER TABLE EMPINST.PHOTO_GUID ADD CONSTRAINT PHOTO_GUID_PK PRIMARY KEY (PROF_GUID);
GO

------------------------------------------------
-- DDL Statements for table EMPINST.PRONUNCIATION
------------------------------------------------
 
CREATE TABLE EMPINST.PRONUNCIATION  (
	PROF_KEY 	NVARCHAR(36) NOT NULL , 
	PROF_PRONOUNCE 	VARBINARY(max),
	PROF_UPDATED 	DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL,
	PROF_FILE_TYPE 	NVARCHAR(50) NOT NULL DEFAULT 'audio/wav',
	TENANT_KEY	NVARCHAR(36) DEFAULT '00000000-0000-0000-0000-040508202233' NOT NULL
); 
GO

ALTER TABLE EMPINST.PRONUNCIATION ADD CONSTRAINT PRONUNCIATION_PK PRIMARY KEY (PROF_KEY, TENANT_KEY);
GO

CREATE INDEX PRONOUNCEIDX ON EMPINST.PRONUNCIATION 
		(PROF_UPDATED DESC, TENANT_KEY);
GO

------------------------------------------------
-- DDL Statements for table EMPINST.WORKLOC
------------------------------------------------
 
CREATE TABLE EMPINST.WORKLOC  (
	PROF_WORK_LOC 		NVARCHAR(32) NOT NULL , 
	PROF_ADDRESS1 		NVARCHAR(256) , 
	PROF_ADDRESS2 		NVARCHAR(256) , 
	PROF_CITY		NVARCHAR(128) , 
	PROF_STATE		NVARCHAR(64) ,
	PROF_POSTAL_CODE	NVARCHAR(16),
	TENANT_KEY		NVARCHAR(36) DEFAULT '00000000-0000-0000-0000-040508202233' NOT NULL 
); 
GO

ALTER TABLE EMPINST.WORKLOC ADD CONSTRAINT WORKLOC_PK PRIMARY KEY (PROF_WORK_LOC, TENANT_KEY);
GO

------------------------------------------------
-- DDL Statements for sequence for Table EMPINST.EMP_DRAFT
------------------------------------------------
CREATE TABLE EMPINST.EMP_DRAFT  (
	PROF_UPDATE_SEQUENCE 		NUMERIC(19,0) IDENTITY NOT NULL,
	PROF_KEY 			NVARCHAR(36) NOT NULL ,
	PROF_UID 			NVARCHAR(256) NOT NULL ,
	PROF_LAST_UPDATE 		DATETIME NOT NULL,
	PROF_MAIL 			NVARCHAR(64) ,
	PROF_GUID 			NVARCHAR(256),
	PROF_SOURCE_UID 		NVARCHAR(256),
	PROF_DISPLAY_NAME 		NVARCHAR(256) ,
	PROF_LOGIN 			NVARCHAR(256),
	PROF_GIVEN_NAME			NVARCHAR(128)  ,
	PROF_SURNAME			NVARCHAR(128)  ,
	PROF_ALTERNATE_LAST_NAME 	NVARCHAR(64) ,
	PROF_PREFERRED_FIRST_NAME 	NVARCHAR(32) ,
	PROF_PREFERRED_LAST_NAME 	NVARCHAR(64) ,
	PROF_TYPE			NVARCHAR(64)  ,
	PROF_MANAGER_UID 		NVARCHAR(256) ,
	PROF_SECRETARY_UID 		NVARCHAR(256) ,
	PROF_IS_MANAGER 		NCHAR(1) ,
	PROF_GROUPWARE_EMAIL 		NVARCHAR(128) ,
	PROF_JOB_RESPONSIBILITIES 	NVARCHAR(128) ,
	PROF_ORGANIZATION_IDENTIFIER 	NVARCHAR(64) ,
	PROF_ISO_COUNTRY_CODE 		NVARCHAR(3) ,
	PROF_FAX_TELEPHONE_NUMBER 	NVARCHAR(32) ,
	PROF_IP_TELEPHONE_NUMBER 	NVARCHAR(32), 
	PROF_MOBILE 			NVARCHAR(32) ,
	PROF_PAGER 			NVARCHAR(32) ,
	PROF_TELEPHONE_NUMBER 		NVARCHAR(32) ,
	PROF_WORK_LOCATION 		NVARCHAR(32) ,
	PROF_BUILDING_IDENTIFIER	NVARCHAR(64) ,
	PROF_DEPARTMENT_NUMBER		NVARCHAR(24) ,
	PROF_EMPLOYEE_TYPE 		NVARCHAR(256) ,
	PROF_FLOOR 			NVARCHAR(16) ,
	PROF_EMPLOYEE_NUMBER 		NVARCHAR(16) ,
	PROF_PAGER_TYPE 		NVARCHAR(16) ,
	PROF_PAGER_ID 			NVARCHAR(32) ,
	PROF_PAGER_SERVICE_PROVIDER 	NVARCHAR(50) ,
	PROF_PHYSICAL_DELIVERY_OFFICE	NVARCHAR(32) ,
	PROF_PREFERRED_LANGUAGE 	NVARCHAR(100) ,
	PROF_SHIFT 			NVARCHAR(4) ,
	PROF_TITLE 			NVARCHAR(256) ,
	PROF_COURTESY_TITLE 		NVARCHAR(64) ,
	PROF_TIMEZONE 			NVARCHAR(64) ,
	PROF_NATIVE_LAST_NAME		NVARCHAR(256) , 
	PROF_NATIVE_FIRST_NAME		NVARCHAR(256) ,
	PROF_BLOG_URL 			NVARCHAR(256) ,
	PROF_FREEBUSY_URL 		NVARCHAR(256) ,
	PROF_CALENDAR_URL 		NVARCHAR(256) ,
	PROF_DESCRIPTION 		NVARCHAR(max) ,
	PROF_EXPERIENCE 		NVARCHAR(max) ,
	TENANT_KEY			NVARCHAR(36) DEFAULT '00000000-0000-0000-0000-040508202233' NOT NULL
);
GO

ALTER TABLE EMPINST.EMP_DRAFT ADD CONSTRAINT EMP_DRAFT_PK PRIMARY KEY (PROF_KEY, PROF_UPDATE_SEQUENCE, TENANT_KEY);
GO

CREATE INDEX ED_MAIL ON EMPINST.EMP_DRAFT 
		(PROF_MAIL ASC, TENANT_KEY);
GO

CREATE INDEX ED_DISPNMX ON EMPINST.EMP_DRAFT 
		(PROF_DISPLAY_NAME ASC, TENANT_KEY);
GO

CREATE INDEX ED_UPDATE_IDX ON EMPINST.EMP_DRAFT 
		(PROF_LAST_UPDATE DESC, PROF_KEY DESC, PROF_UPDATE_SEQUENCE DESC, TENANT_KEY);
GO

------------------------------------------------
-- DDL Statements for table EMPINST.CHG_EMP_DRAFT
------------------------------------------------

CREATE TABLE EMPINST.CHG_EMP_DRAFT ( 
	IBMSNAP_COMMITSEQ 	NUMERIC(19,0) IDENTITY NOT NULL, 
	IBMSNAP_INTENTSEQ 	NUMERIC(19,0) DEFAULT 0, 
	IBMSNAP_LOGMARKER 	DATETIME, 
	IBMSNAP_OPERATION 	NCHAR(1),
	PROF_UPDATE_SEQUENCE 	NUMERIC(19,0) NOT NULL,
	PROF_KEY 		NVARCHAR(36) NOT NULL,
	TENANT_KEY		NVARCHAR(36) DEFAULT '00000000-0000-0000-0000-040508202233' NOT NULL
) ;
GO

-- DDL Statements for triggers for Table CHEMPDRFT.CHG_EMP_DRAFT

CREATE TRIGGER EMPINST.T_EMP_INS
    ON EMPINST.EMP_DRAFT
    AFTER INSERT 
AS
    IF @@ROWCOUNT = 0
        BEGIN
        SET NOCOUNT ON;
        RETURN
        END
    ELSE IF @@ROWCOUNT = 1
        BEGIN
        SET NOCOUNT ON;
        DECLARE @n_seq NUMERIC(19,0), @n_id NVARCHAR(36), @n_tk NVARCHAR(36)
        SELECT @n_seq = PROF_UPDATE_SEQUENCE,@n_id = PROF_KEY,@n_tk = TENANT_KEY FROM inserted
        INSERT INTO EMPINST.CHG_EMP_DRAFT (IBMSNAP_INTENTSEQ, IBMSNAP_LOGMARKER, IBMSNAP_OPERATION,PROF_UPDATE_SEQUENCE, PROF_KEY, TENANT_KEY) VALUES (0, CURRENT_TIMESTAMP, N'I', @n_seq, @n_id, @n_tk )
        END
    ELSE
        BEGIN
        SET NOCOUNT ON;
        INSERT INTO EMPINST.CHG_EMP_DRAFT SELECT 0, CURRENT_TIMESTAMP, N'I', PROF_UPDATE_SEQUENCE, PROF_KEY, TENANT_KEY FROM inserted
        END
GO

CREATE TRIGGER EMPINST.T_EMP_DEL
    ON EMPINST.EMP_DRAFT
    AFTER DELETE 
AS
    IF @@ROWCOUNT = 0
        BEGIN
        SET NOCOUNT ON;
        RETURN
        END
    ELSE IF @@ROWCOUNT = 1
        BEGIN
        SET NOCOUNT ON;
        DECLARE @n_seq NUMERIC(19,0), @n_id NVARCHAR(36), @n_tk NVARCHAR(36)
        SELECT @n_seq = PROF_UPDATE_SEQUENCE,@n_id = PROF_UID FROM deleted
        INSERT INTO EMPINST.CHG_EMP_DRAFT (IBMSNAP_INTENTSEQ, IBMSNAP_LOGMARKER, IBMSNAP_OPERATION,PROF_UPDATE_SEQUENCE, PROF_KEY, TENANT_KEY) VALUES (0, CURRENT_TIMESTAMP, N'D', @n_seq, @n_id, @n_tk )
        END
    ELSE
        BEGIN
        SET NOCOUNT ON;
        INSERT INTO EMPINST.CHG_EMP_DRAFT SELECT 0, CURRENT_TIMESTAMP, N'D', PROF_UPDATE_SEQUENCE, PROF_KEY, TENANT_KEY FROM deleted
        END
GO

CREATE TRIGGER EMPINST.T_EMP_UPD
    ON EMPINST.EMP_DRAFT
    AFTER UPDATE 
AS
    IF @@ROWCOUNT = 0
        BEGIN
        SET NOCOUNT ON;
        RETURN
        END
    ELSE IF @@ROWCOUNT = 1
        BEGIN
        SET NOCOUNT ON;
        DECLARE @n_seq NUMERIC(19,0), @n_id NVARCHAR(36), @n_tk NVARCHAR(36)
        SELECT @n_seq = PROF_UPDATE_SEQUENCE,@n_id = PROF_UID FROM inserted
        INSERT INTO EMPINST.CHG_EMP_DRAFT (IBMSNAP_INTENTSEQ, IBMSNAP_LOGMARKER, IBMSNAP_OPERATION,PROF_UPDATE_SEQUENCE, PROF_KEY, TENANT_KEY) VALUES (0, CURRENT_TIMESTAMP, N'U', @n_seq, @n_id, @n_tk )
        END
    ELSE
        BEGIN
        SET NOCOUNT ON;
        INSERT INTO EMPINST.CHG_EMP_DRAFT SELECT 0, CURRENT_TIMESTAMP, N'U', PROF_UPDATE_SEQUENCE, PROF_KEY, TENANT_KEY FROM inserted
        END
GO

------------------------------------------------
-- DDL Statements for Table EMPINST.PROF_CONNECTIONS
------------------------------------------------

CREATE TABLE EMPINST.PROF_CONNECTIONS (
	PROF_CONNECTION_ID	NVARCHAR(36) NOT NULL,
	PROF_SOURCE_KEY		NVARCHAR(36) NOT NULL,
	PROF_TARGET_KEY		NVARCHAR(36) NOT NULL,
	PROF_CREATED_BY_KEY	NVARCHAR(36) NOT NULL,
	PROF_LASTMOD_BY_KEY	NVARCHAR(36) NOT NULL,
	PROF_LASTMOD		DATETIME NOT NULL,
	PROF_CREATED		DATETIME NOT NULL,
	PROF_STATUS		NUMERIC(19,0) NOT NULL,
	PROF_TYPE		NVARCHAR(36), 
	PROF_MESSAGE		NVARCHAR(2000),
	TENANT_KEY		NVARCHAR(36) DEFAULT '00000000-0000-0000-0000-040508202233' NOT NULL
);

ALTER TABLE EMPINST.PROF_CONNECTIONS ADD CONSTRAINT CONNECTIONS_PK PRIMARY KEY (PROF_CONNECTION_ID, TENANT_KEY);
GO
	
CREATE UNIQUE INDEX CONN_UDX ON EMPINST.PROF_CONNECTIONS
		(PROF_SOURCE_KEY, PROF_TARGET_KEY, PROF_TYPE, TENANT_KEY);

-- Main index to select a users connections for showing friends in UI
CREATE INDEX CONN_INDEX1 ON EMPINST.PROF_CONNECTIONS
	(PROF_SOURCE_KEY ASC, PROF_TYPE ASC, PROF_STATUS ASC, PROF_LASTMOD DESC, PROF_TARGET_KEY ASC, TENANT_KEY);
GO
	
-- Friends in common; get list of connection keys 'isConnection' query
CREATE INDEX CONN_INDEX2 ON EMPINST.PROF_CONNECTIONS 
	(PROF_SOURCE_KEY ASC, PROF_TYPE ASC, PROF_STATUS ASC, PROF_TARGET_KEY ASC, PROF_LASTMOD ASC, TENANT_KEY);
GO

-- Reverse index for deletes
CREATE INDEX CONN_REV_IDX ON EMPINST.PROF_CONNECTIONS 
	(PROF_TARGET_KEY ASC, PROF_TYPE ASC, PROF_STATUS ASC, PROF_SOURCE_KEY ASC, PROF_LASTMOD ASC, TENANT_KEY);
GO

------------------------------------------------
-- DDL Statements for table EMPINST.PROF_CONSTANTS
------------------------------------------------

CREATE TABLE EMPINST.PROF_CONSTANTS (
	PROF_PROPERTY_KEY VARCHAR (64) NOT NULL,
	PROF_PROPERTY_VALUE VARCHAR (128) NOT NULL,
    CONSTRAINT PROF_CONSTANTS_PK PRIMARY KEY (PROF_PROPERTY_KEY)
);
GO

INSERT INTO EMPINST.PROF_CONSTANTS VALUES ('USERID_PROPERTY', 'guid');
GO

INSERT INTO EMPINST.PROF_CONSTANTS VALUES ('sys.usrPhotoThumbnail.task', 'complete');
GO

------------------------------------------------
-- DDL Statements for view "EMPINST"."SNCORE_PERSON"
------------------------------------------------

CREATE VIEW EMPINST.SNCORE_PERSON (SNC_INTERNAL_ID, SNC_IDKEY, SNC_EMAIL_LOWER, SNC_DISPLAY_NAME, SNC_TENANT_KEY)
  	AS SELECT PROF_KEY, PROF_GUID, PROF_MAIL_LOWER, PROF_DISPLAY_NAME, TENANT_KEY FROM EMPINST.EMPLOYEE;

GO

------------------------------------------------
-- DDL Statements for view "EMPINST"."EVENTLOG"
------------------------------------------------

CREATE TABLE EMPINST.EVENTLOG (
	EVENT_KEY	NVARCHAR(36) NOT NULL, 
	EVENT_SOURCE	NVARCHAR(36) NOT NULL, 
	OBJECT_KEY	NVARCHAR(36) NOT NULL,
	EVENT_NAME	NVARCHAR(128) NOT NULL, 
	EVENT_TYPE	NUMERIC(19,0) NOT NULL DEFAULT -1, 
	CREATED		DATETIME NOT NULL,
	CREATED_BY_KEY	NVARCHAR(36) NOT NULL,
	CREATED_BY_GUID	NVARCHAR(256) NOT NULL, 
	CREATED_BY_UID	NVARCHAR(256) NOT NULL, 
	CREATED_BY_NAME	NVARCHAR(128),
	ISPRIVATE	NUMERIC(19,0) DEFAULT 0,
	ISSYSEVENT	NUMERIC(19,0) DEFAULT 0,
	EVENT_METADATA	NVARCHAR(max),
	TENANT_KEY	NVARCHAR(36) DEFAULT '00000000-0000-0000-0000-040508202233' NOT NULL
);
GO

ALTER TABLE EMPINST.EVENTLOG ADD CONSTRAINT EVENTLOG_PK PRIMARY KEY (EVENT_KEY, TENANT_KEY);
GO

CREATE INDEX EVLOG_TYPE_IDX ON EMPINST.EVENTLOG
	(EVENT_TYPE, CREATED, EVENT_KEY, TENANT_KEY);
GO

CREATE INDEX EVLOG_AUDIT_IDX ON EMPINST.EVENTLOG
	(ISSYSEVENT ASC, EVENT_KEY ASC, TENANT_KEY);
GO

------------------------------------------------
-- DDL Statements for view "EMPINST"."PROFILE_LOGIN"
------------------------------------------------

CREATE TABLE EMPINST.PROFILE_LOGIN (
	PROF_KEY	NVARCHAR(36) NOT NULL, 
	PROF_LOGIN	NVARCHAR(256) NOT NULL,
	TENANT_KEY	NVARCHAR(36) DEFAULT '00000000-0000-0000-0000-040508202233' NOT NULL
) ;
GO

ALTER TABLE EMPINST.PROFILE_LOGIN ADD CONSTRAINT PROFILE_LOGIN_PK PRIMARY KEY (PROF_KEY, PROF_LOGIN, TENANT_KEY);
GO

CREATE UNIQUE INDEX LOGIN_UDX ON EMPINST.PROFILE_LOGIN
		(PROF_LOGIN,TENANT_KEY);

------------------------------------------------
-- DDL Statements for view "EMPINST"."PROFILE_PREFS"
------------------------------------------------

CREATE TABLE EMPINST.PROFILE_PREFS (
	PROF_KEY	NVARCHAR(36) NOT NULL, 
	PROF_PREFID 	NVARCHAR(128) NOT NULL,
	PROF_VALUE 	NVARCHAR(1024),
	TENANT_KEY	NVARCHAR(36) DEFAULT '00000000-0000-0000-0000-040508202233' NOT NULL
);
GO

ALTER TABLE EMPINST.PROFILE_PREFS ADD CONSTRAINT PROFILE_PREFS_PK PRIMARY KEY (PROF_KEY, PROF_PREFID, TENANT_KEY);
GO

------------------------------------------------
-- DDL Statements for user to role mappings
------------------------------------------------

CREATE TABLE EMPINST.EMP_ROLE_MAP (
	MAP_KEY        NVARCHAR(36)	 NOT NULL,
	PROF_KEY       NVARCHAR(36)	 NOT NULL,
	ROLE_ID        NVARCHAR(128) NOT NULL,
	CREATED        DATETIME      NOT NULL,
	TENANT_KEY     NVARCHAR(36)  DEFAULT '00000000-0000-0000-0000-040508202233' NOT NULL
);
GO

ALTER TABLE EMPINST.EMP_ROLE_MAP ADD CONSTRAINT EMP_ROLEMAP_PK PRIMARY KEY (MAP_KEY, TENANT_KEY);
GO

CREATE UNIQUE INDEX EMP_ROLE_UDX ON EMPINST.EMP_ROLE_MAP (PROF_KEY, ROLE_ID, TENANT_KEY);
GO

------------------------------------------------
-- DDL Statements for view "EMPINST"."PROFILE_LAST_LOGIN"
------------------------------------------------

CREATE TABLE EMPINST.PROFILE_LAST_LOGIN (
	PROF_KEY		NVARCHAR(36) NOT NULL, 
	PROF_LAST_LOGIN		DATETIME,
	PROF_LOCALE		NVARCHAR(36),
	TENANT_KEY		NVARCHAR(36) DEFAULT '00000000-0000-0000-0000-040508202233' NOT NULL
);
GO

ALTER TABLE EMPINST.PROFILE_LAST_LOGIN ADD CONSTRAINT LASTLOGIN_PK PRIMARY KEY (PROF_KEY, TENANT_KEY);
GO

------------------------------------------------
-- DDL Statements for view "EMPINST"."EMP_UPDATE_TIMESTAMP"
------------------------------------------------

CREATE TABLE EMPINST.EMP_UPDATE_TIMESTAMP (
	PROF_KEY					NVARCHAR(36) NOT NULL, 
	TENANT_KEY					NVARCHAR(36) DEFAULT '00000000-0000-0000-0000-040508202233' NOT NULL,
	LDAP_MOD_TIMESTAMP_SOURCE	NVARCHAR(36) NOT NULL,
	LDAP_MOD_TIMESTAMP	 		NVARCHAR(128) DEFAULT '0' NOT NULL,
	MARK 						NVARCHAR(1) DEFAULT '0' NOT NULL
);
GO

ALTER TABLE EMPINST.EMP_UPDATE_TIMESTAMP ADD CONSTRAINT TS_PK PRIMARY KEY (PROF_KEY, TENANT_KEY, LDAP_MOD_TIMESTAMP_SOURCE);
GO

------------------------------------------------
-- DDL Statements for table "EMPINST"."USER_PLATFORM_EVENTS"
------------------------------------------------

CREATE TABLE EMPINST.USER_PLATFORM_EVENTS (
	EVENT_KEY	BIGINT IDENTITY(0,1) NOT NULL, 
	EVENT_TYPE	NVARCHAR(36) NOT NULL,
	PAYLOAD		NVARCHAR(max),
	CREATED		DATETIME NOT NULL,
	TENANT_KEY	NVARCHAR(36) DEFAULT '00000000-0000-0000-0000-040508202233' NOT NULL
);
GO

ALTER TABLE EMPINST.USER_PLATFORM_EVENTS ADD CONSTRAINT PLATFORMEVENTS_PK PRIMARY KEY (EVENT_KEY, TENANT_KEY);
GO

-------------------------------------------------------------------
-- START ADDING SCHEDULER TABLES
-------------------------------------------------------------------

CREATE TABLE EMPINST.PROFILES_SCHEDULER_TASK (
	TASKID BIGINT NOT NULL,
	VERSION NVARCHAR(5) NOT NULL,
	ROW_VERSION INT NOT NULL,
	TASKTYPE INT NOT NULL,
	TASKSUSPENDED TINYINT NOT NULL,
	CANCELLED TINYINT NOT NULL,
	NEXTFIRETIME BIGINT NOT NULL,
	STARTBYINTERVAL NVARCHAR(254),
	STARTBYTIME BIGINT,
	VALIDFROMTIME BIGINT,
	VALIDTOTIME BIGINT,
	REPEATINTERVAL NVARCHAR(254),
	MAXREPEATS INT NOT NULL,
	REPEATSLEFT INT NOT NULL,
	TASKINFO IMAGE NULL,
	NAME NVARCHAR(254) NOT NULL,
	AUTOPURGE INT NOT NULL,
	FAILUREACTION INT,
	MAXATTEMPTS INT,
	QOS INT,
	PARTITIONID INT,
	OWNERTOKEN NVARCHAR(200) NOT NULL,
	CREATETIME BIGINT NOT NULL
) ;
GO

ALTER TABLE EMPINST.PROFILES_SCHEDULER_TASK WITH NOCHECK 
	ADD CONSTRAINT PROFILES_SCHEDULER_TASK_PK PRIMARY KEY  NONCLUSTERED ( TASKID );
GO

CREATE INDEX PROFILES_SCHEDULER_TASK_IDX1 
	ON EMPINST.PROFILES_SCHEDULER_TASK (TASKID, OWNERTOKEN) ;
GO

CREATE INDEX PROFILES_SCHEDULER_TASK_IDX2 
	ON EMPINST.PROFILES_SCHEDULER_TASK (NEXTFIRETIME ASC, REPEATSLEFT, PARTITIONID) ;
GO

CREATE TABLE EMPINST.PROFILES_SCHEDULER_TREG (
	REGKEY NVARCHAR(254) NOT NULL,
	REGVALUE NVARCHAR(254),
	PRIMARY KEY (REGKEY)
) ;
GO

CREATE TABLE EMPINST.PROFILES_SCHEDULER_LMGR (
	LEASENAME NVARCHAR(254) NOT NULL,
	LEASEOWNER NVARCHAR(254) NOT NULL,
	LEASE_EXPIRE_TIME  BIGINT,
	DISABLED NVARCHAR(5)
) ;
GO

ALTER TABLE EMPINST.PROFILES_SCHEDULER_LMGR
	ADD PRIMARY KEY (LEASENAME);

CREATE TABLE EMPINST.PROFILES_SCHEDULER_LMPR (
	LEASENAME NVARCHAR(224) NOT NULL,
	NAME NVARCHAR(224) NOT NULL,
	VALUE NVARCHAR(224) NOT NULL
) ;
GO

CREATE INDEX PROFILES_SCHEDULER_LMPR_IDX1
	ON EMPINST.PROFILES_SCHEDULER_LMPR (LEASENAME, NAME) ;
GO
