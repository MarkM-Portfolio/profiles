-- ***************************************************************** 
--                                                                   
-- IBM Confidential                                                  
--                                                                   
-- OCO Source Materials                                              
--                                                                   
-- Copyright IBM Corp. 2001, 2010                                    
--                                                                   
-- The source code for this program is not published or otherwise    
-- divested of its trade secrets, irrespective of what has been      
-- deposited with the U.S. Copyright Office.                         
--                                                                   
-- ***************************************************************** 

-- 5724-S68                                                          
USE PEOPLEDB
GO

---  COPY ALL TABLES TO NEW COPY WITH ADDITIONAL PROF_KEY COLUMNS POPULATED FROM EMPLOYEE TABLE

---  BEFORE RUNNINT THIS SCRIPT, RUN JAVA PROGRAM TO UPDATE EMPLOYEE TABLE 

------------------------------------------------
-- DDL Statements for table "EMPINST"."EMPLOYEE"
------------------------------------------------

--- step 1: disable constraints
--- keep the following stmt in sync with integOff.sql

DISABLE TRIGGER ALL ON EMPINST.EMPLOYEE;
GO

exec sp_rename 'EMPINST.EMPLOYEE.EMPLOYEE_PK', 'EMPLOYEE_PK_T'
GO
exec sp_rename 'EMPINST.T_EMPLOYEE_INSRT', 'T_EMPLOYEE_INSRT_T'
GO
exec sp_rename 'EMPINST.T_EMPLOYEE_UPD', 'T_EMPLOYEE_UPD_T'
GO

--- step 2: rename old table to temp

exec sp_rename 'EMPINST.EMPLOYEE', 'EMPLOYEE_T'
GO

--- step 3b: drop constraints on new table


--- step 3: create new table
--- keep the following stmt in sync with createdb.sql

CREATE TABLE EMPINST.EMPLOYEE  (
		  PROF_KEY 			NVARCHAR(36) NOT NULL,
		  PROF_UID 			NVARCHAR(256) NOT NULL,
		  PROF_UID_LOWER		NVARCHAR(256) ,
		  PROF_LAST_UPDATE 		DATETIME,

		  PROF_MAIL 			NVARCHAR(256) ,
          	  PROF_MAIL_LOWER 		NVARCHAR(256) ,
		  PROF_GUID 			NVARCHAR(256) NOT NULL,
		  PROF_SOURCE_UID 		NVARCHAR(256) NOT NULL,

          	  PROF_DISPLAY_NAME 		NVARCHAR(256) ,
		  PROF_LOGIN 			NVARCHAR(36),
		  PROF_LOGIN_LOWER		NVARCHAR(36) ,
		  PROF_GIVEN_NAME		NVARCHAR(128)  ,
		  PROF_SURNAME			NVARCHAR(128)  ,
		  PROF_ALTERNATE_LAST_NAME 	NVARCHAR(64) ,
		  PROF_PREFERRED_FIRST_NAME 	NVARCHAR(32) ,
		  PROF_PREFERRED_LAST_NAME 	NVARCHAR(64) ,
		  PROF_TYPE			NVARCHAR(64)  ,

          	  PROF_MANAGER_UID 		NVARCHAR(256) ,
          	  PROF_SECRETARY_UID 		NVARCHAR(256) ,
          	  PROF_IS_MANAGER 		NCHAR(1) ,

		  PROF_GROUPWARE_EMAIL 		NVARCHAR(256) ,
		  PROF_GW_EMAIL_LOWER 		NVARCHAR(256) ,
		  PROF_JOB_RESPONSIBILITIES 	NVARCHAR(128) ,
          	  PROF_ORGANIZATION_IDENTIFIER NVARCHAR(64) ,
		  PROF_ISO_COUNTRY_CODE 	NVARCHAR(3) ,
		  PROF_FAX_TELEPHONE_NUMBER 	NVARCHAR(32) ,
		  PROF_IP_TELEPHONE_NUMBER 	NVARCHAR(32) ,
		  PROF_MOBILE 			NVARCHAR(32) ,
		  PROF_PAGER 			NVARCHAR(32) ,
		  PROF_TELEPHONE_NUMBER 	NVARCHAR(32) ,
		  PROF_WORK_LOCATION 		NVARCHAR(32) ,

		  PROF_BUILDING_IDENTIFIER 	NVARCHAR(16) ,
		  PROF_DEPARTMENT_NUMBER 	NVARCHAR(16) ,
		  PROF_EMPLOYEE_TYPE 		NVARCHAR(256) ,
		  PROF_FLOOR 			NVARCHAR(16) ,
		  PROF_EMPLOYEE_NUMBER 		NVARCHAR(16) ,
		  PROF_PAGER_TYPE 		NVARCHAR(16) ,
		  PROF_PAGER_ID 		NVARCHAR(32) ,
		  PROF_PAGER_SERVICE_PROVIDER	NVARCHAR(50) ,
		  PROF_PHYSICAL_DELIVERY_OFFICE NVARCHAR(32) ,
		  PROF_PREFERRED_LANGUAGE 	NVARCHAR(100) ,
		  PROF_SHIFT 			NVARCHAR(4) ,
		  PROF_TITLE 			NVARCHAR(256) ,
          	  PROF_COURTESY_TITLE 		NVARCHAR(64) ,
		  PROF_TIMEZONE 		NVARCHAR(50) , 
		  PROF_NATIVE_LAST_NAME 	NVARCHAR(256) ,
		  PROF_NATIVE_FIRST_NAME 	NVARCHAR(256) ,
		  PROF_BLOG_URL 		NVARCHAR(256) ,
		  PROF_FREEBUSY_URL 		NVARCHAR(256) ,
		  PROF_CALENDAR_URL 		NVARCHAR(256) ,

	      	  PROF_DESCRIPTION 		NVARCHAR(4000) ,
          	  PROF_EXPERIENCE 		NVARCHAR(4000)

	  CONSTRAINT EMPLOYEE_PK PRIMARY KEY (PROF_KEY) ) ;
  
GO

--- step 4a: copy data to new table

INSERT INTO EMPINST.EMPLOYEE (
	PROF_KEY,
	PROF_UID,
	PROF_UID_LOWER,

	PROF_GUID,
	PROF_SOURCE_UID,

        PROF_DISPLAY_NAME,
	PROF_LOGIN,
	PROF_LOGIN_LOWER,
	PROF_GIVEN_NAME ,
	PROF_SURNAME ,
	PROF_ALTERNATE_LAST_NAME,
	PROF_PREFERRED_FIRST_NAME,
	PROF_PREFERRED_LAST_NAME,
	PROF_TYPE,

        PROF_MANAGER_UID,
        PROF_SECRETARY_UID,
        PROF_IS_MANAGER,

	PROF_GROUPWARE_EMAIL,
	PROF_GW_EMAIL_LOWER,
	PROF_JOB_RESPONSIBILITIES,
        PROF_ORGANIZATION_IDENTIFIER,
	PROF_ISO_COUNTRY_CODE,
	PROF_FAX_TELEPHONE_NUMBER,
	PROF_IP_TELEPHONE_NUMBER,
	PROF_MOBILE,
	PROF_PAGER,
	PROF_TELEPHONE_NUMBER,
	PROF_WORK_LOCATION,

	PROF_BUILDING_IDENTIFIER,
	PROF_DEPARTMENT_NUMBER,
	PROF_EMPLOYEE_TYPE,
	PROF_MAIL,
	PROF_MAIL_LOWER,
	PROF_FLOOR,
	PROF_EMPLOYEE_NUMBER,
	PROF_LAST_UPDATE,
	PROF_PAGER_TYPE,
	PROF_PAGER_ID,
	PROF_PAGER_SERVICE_PROVIDER,
	PROF_PHYSICAL_DELIVERY_OFFICE,
	PROF_PREFERRED_LANGUAGE,
	PROF_SHIFT,
	PROF_TITLE,
        PROF_COURTESY_TITLE,
	PROF_TIMEZONE, 
	PROF_NATIVE_LAST_NAME,
	PROF_NATIVE_FIRST_NAME,
	PROF_BLOG_URL,
	PROF_FREEBUSY_URL,
        PROF_CALENDAR_URL,

	PROF_DESCRIPTION,
        PROF_EXPERIENCE)
    SELECT
	PROF_KEY,
	PROF_UID,
	PROF_UID_LOWER,

	PROF_GUID,
	PROF_SOURCE_UID,

        PROF_DISPLAY_NAME,
	PROF_LOGIN,
	PROF_LOGIN_LOWER,
	PROF_GIVEN_NAME ,
	PROF_SURNAME ,
	PROF_ALTERNATE_LAST_NAME,
	PROF_PREFERRED_FIRST_NAME,
	PROF_PREFERRED_LAST_NAME,
	PROF_TYPE,

        PROF_MANAGER_UID,
        PROF_SECRETARY_UID,
        PROF_IS_MANAGER,

	PROF_GROUPWARE_EMAIL,
	PROF_GW_EMAIL_LOWER,
	PROF_JOB_RESPONSIBILITIES,
        PROF_ORGANIZATION_IDENTIFIER,
	PROF_ISO_COUNTRY_CODE,
	PROF_FAX_TELEPHONE_NUMBER,
	PROF_IP_TELEPHONE_NUMBER,
	PROF_MOBILE,
	PROF_PAGER,
	PROF_TELEPHONE_NUMBER,
	PROF_WORK_LOCATION,

	PROF_BUILDING_IDENTIFIER,
	PROF_DEPARTMENT_NUMBER,
	PROF_EMPLOYEE_TYPE,
	PROF_MAIL,
	PROF_MAIL_LOWER,
	PROF_FLOOR,
	PROF_EMPLOYEE_NUMBER,
	PROF_LAST_UPDATE,
	PROF_PAGER_TYPE,
	PROF_PAGER_ID,
	PROF_PAGER_SERVICE_PROVIDER,
	PROF_PHYSICAL_DELIVERY_OFFICE,
	PROF_PREFERRED_LANGUAGE,
	PROF_SHIFT,
	PROF_TITLE,
        PROF_COURTESY_TITLE,
	PROF_TIMEZONE, 
	PROF_NATIVE_LAST_NAME,
	PROF_NATIVE_FIRST_NAME,
	PROF_BLOG_URL,
	PROF_FREEBUSY_URL,
        PROF_CALENDAR_URL,

	PROF_DESCRIPTION,
        PROF_EXPERIENCE
FROM EMPINST.EMPLOYEE_T
GO

--- step 4b: add constraints on new table

	
	
-- DDL Statements for triggers on Table EMPINST.EMPLOYEE


CREATE TRIGGER EMPINST.T_EMPLOYEE_INSRT
ON EMPINST.EMPLOYEE 
FOR INSERT 
AS
    IF @@ROWCOUNT = 0
       BEGIN
       SET NOCOUNT ON;
       RETURN
       END
    ELSE IF @@ROWCOUNT = 1
        BEGIN
        SET NOCOUNT ON;
        DECLARE @n_key NVARCHAR(36),@n_uid NVARCHAR(256), @n_mail NVARCHAR(128), @n_gw_email NVARCHAR(128), @n_login NVARCHAR (36)
        SELECT @n_key = PROF_KEY, @n_uid = PROF_UID, @n_mail = PROF_MAIL, @n_gw_email = PROF_GROUPWARE_EMAIL,
			@n_login = PROF_LOGIN FROM inserted
        UPDATE EMPINST.EMPLOYEE 
			SET PROF_LAST_UPDATE = CURRENT_TIMESTAMP,
				PROF_MAIL_LOWER =  CASE @n_mail WHEN NULL THEN NULL ELSE LOWER(@n_mail) END ,
				PROF_UID_LOWER =  CASE @n_uid WHEN NULL THEN NULL ELSE LOWER(@n_uid) END,
				PROF_GW_EMAIL_LOWER =  CASE @n_gw_email WHEN NULL THEN NULL ELSE LOWER(@n_gw_email) END,
			    PROF_LOGIN_LOWER =  CASE @n_login WHEN NULL THEN NULL ELSE LOWER(@n_login) END
		WHERE PROF_KEY = @n_key
        END
    ELSE
        BEGIN
        SET NOCOUNT ON;
        UPDATE EMPINST.EMPLOYEE 
			SET PROF_LAST_UPDATE = CURRENT_TIMESTAMP,
				PROF_MAIL_LOWER =  CASE inserted.PROF_MAIL WHEN NULL THEN NULL ELSE LOWER(inserted.PROF_MAIL) END,
		        PROF_UID_LOWER =  CASE inserted.PROF_UID WHEN NULL THEN NULL ELSE LOWER(inserted.PROF_UID) END,
                PROF_GW_EMAIL_LOWER =  CASE inserted.PROF_GROUPWARE_EMAIL WHEN NULL THEN NULL ELSE LOWER(inserted.PROF_GROUPWARE_EMAIL) END,
                PROF_LOGIN_LOWER =  CASE inserted.PROF_LOGIN WHEN NULL THEN NULL ELSE LOWER(inserted.PROF_LOGIN) END
            FROM EMPINST.EMPLOYEE INNER JOIN inserted ON inserted.PROF_KEY = EMPINST.EMPLOYEE.PROF_KEY;
        END
--END
GO


CREATE TRIGGER EMPINST.T_EMPLOYEE_UPD
ON EMPINST.EMPLOYEE 
FOR UPDATE 
AS
    IF @@ROWCOUNT = 0
       BEGIN
       SET NOCOUNT ON;
       RETURN
       END
    ELSE IF @@ROWCOUNT = 1
        BEGIN
        SET NOCOUNT ON;
        DECLARE @n_key NVARCHAR(36),@n_uid NVARCHAR(256), @n_mail NVARCHAR(128), @n_gw_email NVARCHAR(128), @n_login NVARCHAR (36)
        SELECT @n_key = PROF_KEY, @n_uid = PROF_UID, @n_mail = PROF_MAIL, @n_gw_email = PROF_GROUPWARE_EMAIL,
			@n_login = PROF_LOGIN FROM inserted
        UPDATE EMPINST.EMPLOYEE 
			SET PROF_LAST_UPDATE = CURRENT_TIMESTAMP,
				PROF_MAIL_LOWER =  CASE @n_mail WHEN NULL THEN NULL ELSE LOWER(@n_mail) END ,
				PROF_UID_LOWER =  CASE @n_uid WHEN NULL THEN NULL ELSE LOWER(@n_uid) END,
				PROF_GW_EMAIL_LOWER =  CASE @n_gw_email WHEN NULL THEN NULL ELSE LOWER(@n_gw_email) END,
			PROF_LOGIN_LOWER =  CASE @n_login WHEN NULL THEN NULL ELSE LOWER(@n_login) END
		WHERE  PROF_KEY = @n_key
        END
    ELSE
        BEGIN
        SET NOCOUNT ON;
        UPDATE EMPINST.EMPLOYEE 
			SET PROF_LAST_UPDATE = CURRENT_TIMESTAMP,
				PROF_MAIL_LOWER =  CASE inserted.PROF_MAIL WHEN NULL THEN NULL ELSE LOWER(inserted.PROF_MAIL) END,
		        PROF_UID_LOWER =  CASE inserted.PROF_UID WHEN NULL THEN NULL ELSE LOWER(inserted.PROF_UID) END,
                PROF_GW_EMAIL_LOWER =  CASE inserted.PROF_GROUPWARE_EMAIL WHEN NULL THEN NULL ELSE LOWER(inserted.PROF_GROUPWARE_EMAIL) END,
                PROF_LOGIN_LOWER =  CASE inserted.PROF_LOGIN WHEN NULL THEN NULL ELSE LOWER(inserted.PROF_LOGIN) END
            FROM EMPINST.EMPLOYEE INNER JOIN inserted ON inserted.PROF_KEY = EMPINST.EMPLOYEE.PROF_KEY;
        END
GO


--- step 5: drop temp table

DROP TABLE EMPINST.EMPLOYEE_T;
GO

--- step 6: create triggers/indices new table
--- keep the following stmts in sync with createdb.sql

CREATE INDEX EMP_GUID_IDX ON EMPINST.EMPLOYEE 
		(PROF_GUID ASC);
GO

CREATE INDEX MAIL_IDX ON EMPINST.EMPLOYEE 
		(PROF_MAIL ASC);	
GO

CREATE INDEX MAIL_LOWER_IDX ON EMPINST.EMPLOYEE 
		(PROF_MAIL_LOWER ASC);
GO

CREATE INDEX UID_LOWER_IDX ON EMPINST.EMPLOYEE 
		(PROF_UID_LOWER ASC);
GO

CREATE INDEX GW_EMAIL_LOWER_IDX ON EMPINST.EMPLOYEE 
		(PROF_GW_EMAIL_LOWER ASC);
GO
CREATE INDEX PREF_FNX ON EMPINST.EMPLOYEE 
		(PROF_PREFERRED_FIRST_NAME ASC);
GO

CREATE INDEX PREF_LNX ON EMPINST.EMPLOYEE 
		(PROF_PREFERRED_LAST_NAME ASC);
GO

CREATE INDEX DISPNMX ON EMPINST.EMPLOYEE 
		(PROF_DISPLAY_NAME ASC);
GO

CREATE INDEX MGRIDX ON EMPINST.EMPLOYEE 
		(PROF_MANAGER_UID ASC);
GO

CREATE INDEX GRPEMAIL_IDX ON EMPINST.EMPLOYEE 
		(PROF_GROUPWARE_EMAIL ASC);
GO

CREATE INDEX JOB_RESP_UID_IDX ON EMPINST.EMPLOYEE 
		(PROF_JOB_RESPONSIBILITIES, PROF_KEY);
GO

CREATE INDEX ORG_UID_IDX ON EMPINST.EMPLOYEE 
		(PROF_ORGANIZATION_IDENTIFIER, PROF_KEY);
GO

CREATE INDEX COUNTRY_UID_IDX ON EMPINST.EMPLOYEE 
		(PROF_ISO_COUNTRY_CODE, PROF_KEY);
GO
		
CREATE INDEX FAX_IDX ON EMPINST.EMPLOYEE
                (PROF_FAX_TELEPHONE_NUMBER ASC);
GO

CREATE INDEX IPPHONE_IDX ON EMPINST.EMPLOYEE
                (PROF_IP_TELEPHONE_NUMBER ASC);
GO

CREATE INDEX MOBILE_IDX ON EMPINST.EMPLOYEE
                (PROF_MOBILE ASC);
GO

CREATE INDEX PAGER_IDX ON EMPINST.EMPLOYEE
                (PROF_PAGER ASC);
GO

CREATE INDEX PHONE_IDX ON EMPINST.EMPLOYEE
                (PROF_TELEPHONE_NUMBER ASC);
GO
                
CREATE INDEX WORKLOC_IDX ON EMPINST.EMPLOYEE
                (PROF_WORK_LOCATION ASC);
GO
                           
CREATE INDEX LOGIN_LOWER_IDX ON EMPINST.EMPLOYEE
                (PROF_LOGIN_LOWER ASC);
GO

------------------------------------------------
-- DDL Statements for table "EMPINST"."PROFILE_EXTENSIONS"
------------------------------------------------
 
--- step 1: disable constraints
--- keep the following stmt in sync with predbxfer.sql

--- step 2: rename old table to temp

exec sp_rename 'EMPINST.PROFILE_EXTENSIONS', 'PROFILE_EXTENSIONS_T'

--- step 3: create new table
--- keep the following stmt in sync with createdb.sql

CREATE TABLE EMPINST.PROFILE_EXTENSIONS  (
		  PROF_KEY 		NVARCHAR(36) NOT NULL ,
		  PROF_PROPERTY_ID 	NVARCHAR(64) NOT NULL,  
		  PROF_EXT_KEY 		NVARCHAR(256) ,
		  PROF_NAME 		NVARCHAR(256) ,
		  PROF_DATA_TYPE 	NVARCHAR(64) ,   
		  PROF_VALUE 		NVARCHAR(1024),
		  PROF_VALUE_EXTENDED 	VARBINARY(max)) ;
GO

--- step 4: copy data to new table

INSERT INTO EMPINST.PROFILE_EXTENSIONS (
	PROF_KEY,
	PROF_PROPERTY_ID,
	PROF_EXT_KEY,
	PROF_NAME,
	PROF_DATA_TYPE,
	PROF_VALUE,
	PROF_VALUE_EXTENDED)
   SELECT 
	PROF_KEY,
	PROF_PROPERTY_ID,
	PROF_EXT_KEY,
	PROF_NAME,
	PROF_DATA_TYPE,
	PROF_VALUE,
	PROF_VALUE_EXTENDED
FROM EMPINST.PROFILE_EXTENSIONS_T
GO

--- step 5: drop temp table

DROP TABLE EMPINST.PROFILE_EXTENSIONS_T;
GO

--- step 6: create triggers/indices new table
--- keep the following stmts in sync with createdb.sql

-- DDL Statements for indexes on Table "EMPINST"."GIVEN_NAME"

CREATE CLUSTERED INDEX PROFILE_EXTENSIONS_IDX ON EMPINST.PROFILE_EXTENSIONS 
		(PROF_KEY ASC);
GO

------------------------------------------------
-- DDL Statements for table "EMPINST"."PEOPLE_TAG"
------------------------------------------------
 
--- step 1: disable constraints
--- keep the following stmt in sync with predbxfer.sql

exec sp_rename 'EMPINST.PEOPLE_TAG.PK', 'PK_T'
GO

--- step 2: rename old table to temp

exec sp_rename 'EMPINST.PEOPLE_TAG', 'PEOPLE_TAG_T'
GO


--- step 3: create new table
--- keep the following stmt in sync with createdb.sql

CREATE TABLE EMPINST.PEOPLE_TAG (
      PROF_TAG_ID     NVARCHAR(36) NOT NULL,
	  PROF_SOURCE_KEY 	NVARCHAR(36),
	  PROF_TARGET_KEY 	NVARCHAR(36) NOT NULL,
	  PROF_TAG 		NVARCHAR(256) NOT NULL) ;
GO

--- step 4: copy data to new table

INSERT INTO EMPINST.PEOPLE_TAG (
	PROF_TAG_ID,
	PROF_TARGET_KEY,
	PROF_TAG)
   SELECT 
	PROF_TAG_ID,
	PROF_KEY, 
	PROF_TAG
FROM EMPINST.PEOPLE_TAG_T
GO



--- step 5: drop temp table

DROP TABLE EMPINST.PEOPLE_TAG_T;
GO

--- step 6: create triggers/indices new table
--- keep the following stmts in sync with createdb.sql
-- DDL Statements for indexes on Table "EMPINST"."PROFILE_EXT_DRAFT"

CREATE INDEX PEOPLE_TAG_IDX ON EMPINST.PEOPLE_TAG 
		(PROF_TAG ASC, PROF_TARGET_KEY ASC) ;
GO

CREATE CLUSTERED INDEX PEOPLE_TAG_IDX2 ON EMPINST.PEOPLE_TAG 
		(PROF_TARGET_KEY ASC) ;
GO

CREATE UNIQUE INDEX PEOPLE_TAG_UDX ON EMPINST.PEOPLE_TAG 
		(PROF_TAG_ID ASC) ;
GO

ALTER TABLE EMPINST.PEOPLE_TAG ADD PRIMARY KEY
		(PROF_TARGET_KEY, PROF_TAG) ;
GO
------------------------------------------------
-- DDL Statements for table "EMPINST"."PROFILE_EXT_DRAFT"
------------------------------------------------
 
--- step 1: disable constraints
--- keep the following stmt in sync with predbxfer.sql

exec sp_rename 'EMPINST.PROFILE_EXT_DRAFT.EXT_DRAFT_PK', 'EXT_DRAFT_PK_T'
GO

--- step 2: rename old table to temp

exec sp_rename 'EMPINST.PROFILE_EXT_DRAFT', 'PROFILE_EXT_DRAFT_T'


--- step 3: create new table
--- keep the following stmt in sync with createdb.sql

CREATE TABLE EMPINST.PROFILE_EXT_DRAFT  (
		  PROF_UPDATE_SEQUENCE	NUMERIC(19,0) IDENTITY NOT NULL,
		  PROF_KEY 			NVARCHAR(36) NOT NULL ,
		  PROF_PROPERTY_ID 		NVARCHAR(64)  NOT NULL,  
		  PROF_EXT_KEY 			NVARCHAR(256) ,
		  PROF_NAME 			NVARCHAR(256) ,
		  PROF_DATA_TYPE 		NVARCHAR(64) ,   
		  PROF_VALUE 			NVARCHAR(1024),
		  PROF_VALUE_EXTENDED 		VARBINARY(max)) ;
GO


--- step 4: copy data to new table
SET IDENTITY_INSERT EMPINST.PROFILE_EXT_DRAFT ON

INSERT INTO EMPINST.PROFILE_EXT_DRAFT (
	PROF_UPDATE_SEQUENCE,
	PROF_KEY,
	PROF_PROPERTY_ID,
	PROF_EXT_KEY,
	PROF_NAME,
	PROF_DATA_TYPE,
	PROF_VALUE)
   SELECT 
	PROF_UPDATE_SEQUENCE,
	PROF_KEY,
	PROF_PROPERTY_ID,
	PROF_EXT_KEY,
	PROF_NAME,
	PROF_DATA_TYPE,
	PROF_VALUE
FROM EMPINST.PROFILE_EXT_DRAFT_T
GO

SET IDENTITY_INSERT EMPINST.PROFILE_EXT_DRAFT OFF
GO

--- step 5: drop temp table

DROP TABLE EMPINST.PROFILE_EXT_DRAFT_T;
GO

--- step 6: create triggers/indices new table
--- keep the following stmts in sync with createdb.sql
-- DDL Statements for indexes on Table "EMPINST"."PROFILE_EXT_DRAFT"

CREATE UNIQUE CLUSTERED INDEX EXT_DRAFT_PK ON EMPINST.PROFILE_EXT_DRAFT 
		(PROF_KEY ASC, PROF_UPDATE_SEQUENCE ASC) ;
GO

------------------------------------------------
-- DDL Statements for sequence for Table "EMPINST"."EMP_DRAFT"
------------------------------------------------


--- step 1: disable constraints
--- keep the following stmt in sync with predbxfer.sql

exec sp_rename 'EMPINST.PK_EMP_DRAFT', 'PK_EMP_DRAFT_T'
GO
exec sp_rename 'EMPINST.T_EMP_INS', 'T_EMP_INS_T'
exec sp_rename 'EMPINST.T_EMP_UPD', 'T_EMP_UPD_T'
exec sp_rename 'EMPINST.T_EMP_DEL', 'T_EMP_DEL_T'
GO

--- step 2: rename old table to temp

exec sp_rename 'EMPINST.EMP_DRAFT', 'EMP_DRAFT_T'
GO

--- step 3: create new table
--- keep the following stmt in sync with createdb.sql

CREATE TABLE EMPINST.EMP_DRAFT  (
	PROF_UPDATE_SEQUENCE 		NUMERIC(19,0) IDENTITY NOT NULL,
	PROF_KEY 			NVARCHAR(36) NOT NULL ,
	PROF_UID 			NVARCHAR(256) NOT NULL ,
	PROF_LAST_UPDATE 		DATETIME ,

	PROF_MAIL 			NVARCHAR(64) ,
	PROF_GUID 			NVARCHAR(256),
        PROF_SOURCE_UID 		NVARCHAR(256),

        PROF_DISPLAY_NAME 		NVARCHAR(256) ,
	PROF_LOGIN 			NVARCHAR(36),
	PROF_GIVEN_NAME			NVARCHAR(128)  ,
	PROF_SURNAME			NVARCHAR(128)  ,
	PROF_ALTERNATE_LAST_NAME 	NVARCHAR(64) ,
	PROF_PREFERRED_FIRST_NAME 	NVARCHAR(32) ,
	PROF_PREFERRED_LAST_NAME 	NVARCHAR(64) ,
	PROF_TYPE			NVARCHAR(64)  ,

        PROF_MANAGER_UID 		NVARCHAR(256) ,
        PROF_SECRETARY_UID 		NVARCHAR(256) ,
        PROF_IS_MANAGER 		NCHAR(1) ,

	PROF_GROUPWARE_EMAIL 		NVARCHAR(128) ,
	PROF_JOB_RESPONSIBILITIES 	NVARCHAR(128) ,
        PROF_ORGANIZATION_IDENTIFIER 	NVARCHAR(64) ,
	PROF_ISO_COUNTRY_CODE 	NVARCHAR(3) ,
	PROF_FAX_TELEPHONE_NUMBER 	NVARCHAR(32) ,
	PROF_IP_TELEPHONE_NUMBER 	NVARCHAR(32), 
	PROF_MOBILE 			NVARCHAR(32) ,
	PROF_PAGER 			NVARCHAR(32) ,
	PROF_TELEPHONE_NUMBER 	NVARCHAR(32) ,
	PROF_WORK_LOCATION 		NVARCHAR(32) ,

	PROF_BUILDING_IDENTIFIER	NVARCHAR(16) ,
	PROF_DEPARTMENT_NUMBER	NVARCHAR(16) ,
	PROF_EMPLOYEE_TYPE 		NVARCHAR(256) ,
	PROF_FLOOR 			NVARCHAR(16) ,
	PROF_EMPLOYEE_NUMBER 		NVARCHAR(16) ,
	PROF_PAGER_TYPE 		NVARCHAR(16) ,
	PROF_PAGER_ID 		NVARCHAR(32) ,
	PROF_PAGER_SERVICE_PROVIDER 	NVARCHAR(50) ,
	PROF_PHYSICAL_DELIVERY_OFFICE NVARCHAR(32) ,
	PROF_PREFERRED_LANGUAGE 	NVARCHAR(100) ,
	PROF_SHIFT 			NVARCHAR(4) ,
	PROF_TITLE 			NVARCHAR(256) ,
        PROF_COURTESY_TITLE 		NVARCHAR(64) ,
	PROF_TIMEZONE 		NVARCHAR(50) ,
	PROF_NATIVE_LAST_NAME		NVARCHAR(256) , 
	PROF_NATIVE_FIRST_NAME	NVARCHAR(256) ,
	PROF_BLOG_URL 		NVARCHAR(256) ,
	PROF_FREEBUSY_URL 		NVARCHAR(256) ,
        PROF_CALENDAR_URL 		NVARCHAR(256) ,

        PROF_DESCRIPTION 		NVARCHAR(4000) ,
        PROF_EXPERIENCE 		NVARCHAR(4000) ,
	  CONSTRAINT PK_EMP_DRAFT PRIMARY KEY CLUSTERED (PROF_UPDATE_SEQUENCE, PROF_KEY) ) ;
GO

--- step 4A: copy data to new table

SET IDENTITY_INSERT EMPINST.EMP_DRAFT ON

INSERT INTO EMPINST.EMP_DRAFT (
	PROF_UPDATE_SEQUENCE,
	PROF_KEY,
	PROF_UID,

	PROF_GUID,
	PROF_SOURCE_UID,

        PROF_DISPLAY_NAME,
	PROF_ALTERNATE_LAST_NAME,
	PROF_PREFERRED_FIRST_NAME,
	PROF_PREFERRED_LAST_NAME,

        PROF_MANAGER_UID,
        PROF_SECRETARY_UID,
        PROF_IS_MANAGER,

	PROF_GROUPWARE_EMAIL,
	PROF_JOB_RESPONSIBILITIES,
        PROF_ORGANIZATION_IDENTIFIER,
	PROF_ISO_COUNTRY_CODE,
	PROF_FAX_TELEPHONE_NUMBER,
	PROF_IP_TELEPHONE_NUMBER,
	PROF_MOBILE,
	PROF_PAGER,
	PROF_TELEPHONE_NUMBER,
	PROF_WORK_LOCATION,

	PROF_BUILDING_IDENTIFIER,
	PROF_DEPARTMENT_NUMBER,
	PROF_EMPLOYEE_TYPE,
	PROF_MAIL,
	PROF_FLOOR,
	PROF_EMPLOYEE_NUMBER,
	PROF_LAST_UPDATE,
	PROF_PAGER_TYPE,
	PROF_PAGER_ID,
	PROF_PAGER_SERVICE_PROVIDER,
	PROF_PHYSICAL_DELIVERY_OFFICE,
	PROF_PREFERRED_LANGUAGE,
	PROF_SHIFT,
	PROF_TITLE,
        PROF_COURTESY_TITLE,
	PROF_TIMEZONE, 
	PROF_NATIVE_LAST_NAME,
	PROF_NATIVE_FIRST_NAME,
	PROF_BLOG_URL,
	PROF_FREEBUSY_URL,
        PROF_CALENDAR_URL,

	PROF_DESCRIPTION,
        PROF_EXPERIENCE)
  SELECT 
	PROF_UPDATE_SEQUENCE,
	PROF_UID,
	PROF_UID,

	PROF_GUID,
	PROF_SOURCE_UID,

        PROF_DISPLAY_NAME,
	PROF_ALTERNATE_LAST_NAME,
	PROF_PREFERRED_FIRST_NAME,
	PROF_PREFERRED_LAST_NAME,

        PROF_MANAGER_UID,
        PROF_SECRETARY_UID,
        PROF_IS_MANAGER,

	PROF_GROUPWARE_EMAIL,
	PROF_JOB_RESPONSIBILITIES,
        PROF_ORGANIZATION_IDENTIFIER,
	PROF_ISO_COUNTRY_CODE,
	PROF_FAX_TELEPHONE_NUMBER,
	PROF_IP_TELEPHONE_NUMBER,
	PROF_MOBILE,
	PROF_PAGER,
	PROF_TELEPHONE_NUMBER,
	PROF_WORK_LOCATION,

	PROF_BUILDING_IDENTIFIER,
	PROF_DEPARTMENT_NUMBER,
	PROF_EMPLOYEE_TYPE,
	PROF_MAIL,
	PROF_FLOOR,
	PROF_EMPLOYEE_NUMBER,
	PROF_LAST_UPDATE,
	PROF_PAGER_TYPE,
	PROF_PAGER_ID,
	PROF_PAGER_SERVICE_PROVIDER,
	PROF_PHYSICAL_DELIVERY_OFFICE,
	PROF_PREFERRED_LANGUAGE,
	PROF_SHIFT,
	PROF_TITLE,
        PROF_COURTESY_TITLE,
	PROF_TIMEZONE, 
	PROF_NATIVE_LAST_NAME,
	PROF_NATIVE_FIRST_NAME,
	PROF_BLOG_URL,
	PROF_FREEBUSY_URL,
        PROF_CALENDAR_URL,

	PROF_DESCRIPTION,
        PROF_EXPERIENCE
FROM EMPINST.EMP_DRAFT_T

SET IDENTITY_INSERT EMPINST.EMP_DRAFT OFF
GO

UPDATE EMPINST.EMP_DRAFT
	SET PROF_KEY=
		(SELECT PROF_KEY 
		FROM EMPINST.EMPLOYEE E 
		WHERE PROF_UID=EMP_DRAFT.PROF_KEY);
GO

--- step 4b: add constraints on new table


--- step 5: drop temp table

DROP TABLE EMPINST.EMP_DRAFT_T;
GO

--- step 6: create triggers/indices new table
--- keep the following stmts in sync with createdb.sql

CREATE UNIQUE INDEX EMP_DRAFT_PK ON EMPINST.EMP_DRAFT 
		(PROF_KEY ASC, PROF_UPDATE_SEQUENCE ASC) ;
GO

CREATE INDEX ED_MAIL ON EMPINST.EMP_DRAFT 
		(PROF_MAIL ASC);
GO

CREATE INDEX ED_PREF_FNX ON EMPINST.EMP_DRAFT 
		(PROF_PREFERRED_FIRST_NAME ASC);
GO

CREATE INDEX ED_PREF_LNX ON EMPINST.EMP_DRAFT 
		(PROF_PREFERRED_LAST_NAME ASC);
GO

CREATE INDEX ED_DISPNMX ON EMPINST.EMP_DRAFT 
		(PROF_DISPLAY_NAME ASC);
GO

CREATE TRIGGER EMPINST.T_EMP_INS
    ON EMPINST.EMP_DRAFT
    AFTER INSERT 
AS
    IF @@ROWCOUNT = 0
        BEGIN
        SET NOCOUNT ON;
        RETURN
        END
    ELSE IF @@ROWCOUNT = 1
        BEGIN
        SET NOCOUNT ON;
        DECLARE @n_seq NUMERIC(19,0), @n_id NVARCHAR(36)
        SELECT @n_seq = PROF_UPDATE_SEQUENCE,@n_id = PROF_UID FROM inserted
        INSERT INTO EMPINST.CHG_EMP_DRAFT (IBMSNAP_INTENTSEQ, IBMSNAP_LOGMARKER, IBMSNAP_OPERATION,PROF_UPDATE_SEQUENCE, PROF_KEY) VALUES (0, CURRENT_TIMESTAMP, N'I', @n_seq, @n_id )
        END
    ELSE
        BEGIN
        SET NOCOUNT ON;
        INSERT INTO EMPINST.CHG_EMP_DRAFT SELECT 0, CURRENT_TIMESTAMP, N'I', PROF_UPDATE_SEQUENCE, PROF_KEY FROM inserted
        END
GO

CREATE TRIGGER EMPINST.T_EMP_DEL
    ON EMPINST.EMP_DRAFT
    AFTER DELETE 
AS
    IF @@ROWCOUNT = 0
        BEGIN
        SET NOCOUNT ON;
        RETURN
        END
    ELSE IF @@ROWCOUNT = 1
        BEGIN
        SET NOCOUNT ON;
        DECLARE @n_seq NUMERIC(19,0), @n_id NVARCHAR(36)
        SELECT @n_seq = PROF_UPDATE_SEQUENCE,@n_id = PROF_UID FROM deleted
        INSERT INTO EMPINST.CHG_EMP_DRAFT (IBMSNAP_INTENTSEQ, IBMSNAP_LOGMARKER, IBMSNAP_OPERATION,PROF_UPDATE_SEQUENCE, PROF_KEY) VALUES (0, CURRENT_TIMESTAMP, N'D', @n_seq, @n_id )
        END
    ELSE
        BEGIN
        SET NOCOUNT ON;
        INSERT INTO EMPINST.CHG_EMP_DRAFT SELECT 0, CURRENT_TIMESTAMP, N'D', PROF_UPDATE_SEQUENCE, PROF_KEY FROM deleted
        END
GO

CREATE TRIGGER EMPINST.T_EMP_UPD
    ON EMPINST.EMP_DRAFT
    AFTER UPDATE 
AS
    IF @@ROWCOUNT = 0
        BEGIN
        SET NOCOUNT ON;
        RETURN
        END
    ELSE IF @@ROWCOUNT = 1
        BEGIN
        SET NOCOUNT ON;
        DECLARE @n_seq NUMERIC(19,0), @n_id NVARCHAR(36)
        SELECT @n_seq = PROF_UPDATE_SEQUENCE,@n_id = PROF_UID FROM inserted
        INSERT INTO EMPINST.CHG_EMP_DRAFT (IBMSNAP_INTENTSEQ, IBMSNAP_LOGMARKER, IBMSNAP_OPERATION,PROF_UPDATE_SEQUENCE, PROF_KEY) VALUES (0, CURRENT_TIMESTAMP, N'U', @n_seq, @n_id )
        END
    ELSE
        BEGIN
        SET NOCOUNT ON;
        INSERT INTO EMPINST.CHG_EMP_DRAFT SELECT 0, CURRENT_TIMESTAMP, N'U', PROF_UPDATE_SEQUENCE, PROF_KEY FROM inserted
        END
GO


------------------------------------------------
-- DDL Statements for table "EMPINST"."PROF_CONNECTIONS"
------------------------------------------------

DROP INDEX EMPINST.PROF_CONNECTIONS.CONN_UK;
DROP INDEX EMPINST.PROF_CONNECTIONS.CONN_SRCX;
DROP INDEX EMPINST.PROF_CONNECTIONS.CONN_TGTX;
GO

CREATE UNIQUE INDEX CONN_UDX ON EMPINST.PROF_CONNECTIONS
		(PROF_SOURCE_KEY, PROF_TARGET_KEY, PROF_VALUE);

CREATE INDEX CONN_INDEX1 ON EMPINST.PROF_CONNECTIONS
	(PROF_SOURCE_KEY, PROF_CREATED_BY_KEY, PROF_STATUS, 
		PROF_VISIBILITY, PROF_TYPE);

CREATE INDEX CONN_INDEX2 ON EMPINST.PROF_CONNECTIONS
	(PROF_TARGET_KEY, PROF_CREATED_BY_KEY, PROF_STATUS, 
		PROF_VISIBILITY, PROF_TYPE); 
GO

------------------------------------------------
-- DDL Statements for table "EMPINST"."PHOTO"
------------------------------------------------
 
--- step 1: disable constraints
--- keep the following stmt in sync with predbxfer.sql

exec sp_rename 'EMPINST.PHOTO.PHOTO_PK', 'PHOTO_PK_T'
exec sp_rename 'EMPINST.T_PHOTO_INSRT', 'T_PHOTO_INSRT_T'
GO

--- step 2: rename old table to temp

exec sp_rename 'EMPINST.PHOTO', 'PHOTO_T'
GO

--- step 3: create new table
--- keep the following stmt in sync with createdb.sql

 CREATE TABLE EMPINST.PHOTO  (
		  PROF_KEY		NVARCHAR(36) NOT NULL , 
		  PROF_FILE_TYPE 	NVARCHAR(50) , 
		  PROF_UPDATED 	DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL,
		  PROF_IMAGE 		VARBINARY(max),
		  PROF_THUMBNAIL	VARBINARY(max) ) ; 
GO

--- step 4A: copy data to new table

INSERT INTO EMPINST.PHOTO (
	PROF_KEY,
	PROF_FILE_TYPE,
	PROF_UPDATED,
	PROF_IMAGE)
   SELECT 
	PROF_KEY,
	PROF_FILE_TYPE,
	PROF_UPDATED,
	PROF_IMAGE
FROM EMPINST.PHOTO_T
GO


--- step 4b: add constraints on new table

CREATE TRIGGER EMPINST.T_PHOTO_INSRT
ON EMPINST.PHOTO
FOR UPDATE 
AS
    IF @@ROWCOUNT = 0
       BEGIN
       SET NOCOUNT ON;
       RETURN
       END
    ELSE IF @@ROWCOUNT = 1
        BEGIN
        SET NOCOUNT ON;
        DECLARE @n_id NVARCHAR(36)
        SELECT @n_id = PROF_KEY FROM inserted
        UPDATE EMPINST.PHOTO SET PROF_UPDATED = CURRENT_TIMESTAMP WHERE PROF_KEY = @n_id
        END
    ELSE
        BEGIN
        SET NOCOUNT ON;
        UPDATE EMPINST.PHOTO SET PROF_UPDATED = CURRENT_TIMESTAMP WHERE PROF_KEY IN (SELECT distinct PROF_KEY FROM inserted)
        END
GO

--- step 5: drop temp table

DROP TABLE EMPINST.PHOTO_T;
GO

--- step 6: create triggers/indices new table
--- keep the following stmts in sync with createdb.sql
-- DDL Statements for indexes on Table "EMPINST"."PROFILE_EXT_DRAFT"

CREATE INDEX PHOTOIDX ON EMPINST.PHOTO 
		(PROF_UPDATED DESC);
GO

CREATE UNIQUE INDEX PHOTO_PK ON EMPINST.PHOTO 
		(PROF_KEY ASC) ;
GO

------------------------------------------------
-- update schema to current version
------------------------------------------------

UPDATE EMPINST.SNPROF_SCHEMA SET DBSCHEMAVER= 2 WHERE COMPKEY='Profiles';
