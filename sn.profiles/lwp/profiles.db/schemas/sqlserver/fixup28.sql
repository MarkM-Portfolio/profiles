-- ***************************************************************** 
--                                                                   
-- IBM Confidential                                                  
--                                                                   
-- OCO Source Materials                                              
--                                                                   
-- Copyright IBM Corp. 2009, 2010                                    
--                                                                   
-- The source code for this program is not published or otherwise    
-- divested of its trade secrets, irrespective of what has been      
-- deposited with the U.S. Copyright Office.                         
--                                                                   
-- ***************************************************************** 

-- 5724-S68                                                          
USE PEOPLEDB
GO

DROP TABLE EMPINST.USER_STATE_LAIDX;
GO

{include.dynaDefsFixUp05.sql}

-- fix some indexes
DROP INDEX EMPINST.PROF_CONNECTIONS.CONN_INDEX1;
GO
DROP INDEX EMPINST.PROF_CONNECTIONS.CONN_INDEX2;
GO
DROP INDEX EMPINST.PROF_CONNECTIONS.CONN_TARGET_IDX;
GO

-- Main index to select a users connections for showing friends in UI
CREATE INDEX CONN_INDEX1 ON EMPINST.PROF_CONNECTIONS
	(PROF_SOURCE_KEY ASC, PROF_TYPE ASC, PROF_STATUS ASC, PROF_LASTMOD DESC, PROF_TARGET_KEY ASC);
GO
	
-- Friends in common; get list of connection keys
-- 'isConnection' query
CREATE INDEX CONN_INDEX2 ON EMPINST.PROF_CONNECTIONS 
	(PROF_SOURCE_KEY ASC, PROF_TYPE ASC, PROF_STATUS ASC, PROF_TARGET_KEY ASC, PROF_LASTMOD ASC);
GO

-- Reverse index for deletes
CREATE INDEX CONN_REV_IDX ON EMPINST.PROF_CONNECTIONS 
	(PROF_TARGET_KEY ASC, PROF_TYPE ASC, PROF_STATUS ASC, PROF_SOURCE_KEY ASC, PROF_LASTMOD ASC);
GO

--
-- User state look aside index table
--
CREATE TABLE EMPINST.USER_STATE_LAIDX (
	IDXID    BINARY(16) NOT NULL,
	DEFID    BINARY(16) NOT NULL,
	ATTRID	 BINARY(16) NOT NULL,
	USRSTATE INTEGER NOT NULL,
	USRSTATE_UPDATED DATETIME NOT NULL,
	OBJID    BINARY(16) NOT NULL,
	OBJIDSTR   NCHAR(36) NOT NULL,
	CONSTRAINT USRSTATE_PK PRIMARY KEY (IDXID)
);
GO

--
-- Foriegn key constraint to reference field which contains value
--
ALTER TABLE EMPINST.USER_STATE_LAIDX ADD CONSTRAINT USRSTATE_ATTR_FK FOREIGN KEY (ATTRID) 
	REFERENCES EMPINST.DYNA_ATTRS(ATTRID)
	ON DELETE CASCADE ON UPDATE NO ACTION;
GO

--
-- Foriegn key constraint on obj-ref table to clean up on deletion
--
ALTER TABLE EMPINST.USER_STATE_LAIDX ADD CONSTRAINT USRSTATE_DEF_FK FOREIGN KEY (DEFID) 
	REFERENCES EMPINST.DYNA_DEFS(DEFID)
	ON DELETE NO ACTION ON UPDATE NO ACTION;
GO

--
-- Enforce single attr/idx-val
--
ALTER TABLE EMPINST.USER_STATE_LAIDX ADD CONSTRAINT USRSTE_ATTR_UK UNIQUE (ATTRID);
GO

--
-- Constrain to one value per user
--
ALTER TABLE EMPINST.USER_STATE_LAIDX ADD CONSTRAINT OBJID_UNIQUE UNIQUE (OBJID);
GO
ALTER TABLE EMPINST.USER_STATE_LAIDX ADD CONSTRAINT OBJIDSTR_UNIQUE UNIQUE (OBJIDSTR);
GO

CREATE UNIQUE INDEX USRSTATE_CONS_VALB 
	ON EMPINST.USER_STATE_LAIDX (OBJID ASC, OBJIDSTR ASC, USRSTATE ASC, USRSTATE_UPDATED ASC);
GO
	
CREATE UNIQUE INDEX USRSTATE_CONS_VALS 
	ON EMPINST.USER_STATE_LAIDX (OBJIDSTR ASC, OBJID ASC, USRSTATE ASC, USRSTATE_UPDATED ASC);
GO

--
-- Main index for scanning
--
CREATE INDEX USRSTATE_IDX
	ON EMPINST.USER_STATE_LAIDX (USRSTATE ASC, USRSTATE_UPDATED ASC, OBJID ASC, OBJIDSTR ASC);
GO
CREATE INDEX USRSTATE_IDXR
	ON EMPINST.USER_STATE_LAIDX (USRSTATE ASC, USRSTATE_UPDATED DESC, OBJID ASC, OBJIDSTR ASC);
GO

--
-- User state look aside index table
--
CREATE TABLE EMPINST.USER_ORGS_LAIDX (
	IDXID    BINARY(16) NOT NULL,
	DEFID    BINARY(16) NOT NULL,
	ATTRID	 BINARY(16) NOT NULL,
	ORGID	 NVARCHAR(128) NOT NULL,
	OBJID    BINARY(16) NOT NULL,
	OBJIDSTR NCHAR(36) NOT NULL,
	CONSTRAINT USRORGS_PK PRIMARY KEY (IDXID)
);
GO

--
-- Foriegn key constraint to reference field which contains value
--
ALTER TABLE EMPINST.USER_ORGS_LAIDX ADD CONSTRAINT USRORGS_ATTR_FK FOREIGN KEY (ATTRID) 
	REFERENCES EMPINST.DYNA_ATTRS(ATTRID)
	ON DELETE CASCADE ON UPDATE NO ACTION;
GO

--
-- Foriegn key constraint on obj-ref table to clean up on deletion
--
ALTER TABLE EMPINST.USER_ORGS_LAIDX ADD CONSTRAINT USRORGS_DEF_FK FOREIGN KEY (DEFID) 
	REFERENCES EMPINST.DYNA_DEFS(DEFID)
	ON DELETE NO ACTION ON UPDATE NO ACTION;
GO	

--
--
--
ALTER TABLE EMPINST.USER_ORGS_LAIDX ADD CONSTRAINT USRORGS_ATTR_UK UNIQUE (ATTRID);
GO

--
-- Main index for scanning
--
CREATE INDEX USRORGS_IDX
	ON EMPINST.USER_ORGS_LAIDX (DEFID ASC, ORGID ASC, OBJIDSTR ASC, OBJID ASC)
GO

ALTER TABLE EMPINST.USER_ORGS_LAIDX ADD CONSTRAINT USRORGS_C_OBJID UNIQUE (DEFID, OBJID, ORGID);
GO
ALTER TABLE EMPINST.USER_ORGS_LAIDX ADD CONSTRAINT USRORGS_C_OBJIDS UNIQUE (DEFID, OBJIDSTR, ORGID);
GO

CREATE INDEX USRORGS_MEM_BIDX
	ON EMPINST.USER_ORGS_LAIDX (OBJID ASC, DEFID ASC, ORGID ASC, OBJIDSTR ASC);
GO

CREATE INDEX USRORGS_MEM_SIDX
	ON EMPINST.USER_ORGS_LAIDX (OBJIDSTR ASC, DEFID ASC, ORGID ASC, OBJID ASC);
GO

--
-- Denormalized names tables for query optimization
--

-- Fix given_name
ALTER TABLE EMPINST.GIVEN_NAME ADD PROF_USRSTATE INTEGER DEFAULT 0 NOT NULL;
GO

DROP INDEX EMPINST.GIVEN_NAME.GIVEN_NAMEX;
GO
DROP INDEX EMPINST.GIVEN_NAME.GIVENNAME_IDX; 
GO

CREATE INDEX GIVEN_NAME_IDX ON EMPINST.GIVEN_NAME (PROF_GIVENNAME ASC, PROF_KEY ASC, PROF_USRSTATE ASC);
GO

CREATE INDEX GIVEN_NAME_IDX2 ON EMPINST.GIVEN_NAME (PROF_USRSTATE ASC, PROF_GIVENNAME ASC, PROF_KEY ASC);
GO

CREATE INDEX GIVEN_NAMEX ON EMPINST.GIVEN_NAME (PROF_KEY ASC, PROF_GIVENNAME ASC, PROF_USRSTATE ASC);
GO

-- Fix surname
ALTER TABLE EMPINST.SURNAME ADD PROF_USRSTATE INTEGER DEFAULT 0 NOT NULL;
GO

DROP INDEX EMPINST.SURNAME.SURNAMEX;
GO
DROP INDEX EMPINST.SURNAME.SURNAME_IDX;
GO

CREATE INDEX SURNAME_IDX ON EMPINST.SURNAME (PROF_SURNAME ASC, PROF_KEY ASC, PROF_USRSTATE ASC);
GO

CREATE INDEX SURNAME_IDX2 ON EMPINST.SURNAME (PROF_USRSTATE ASC, PROF_SURNAME ASC, PROF_KEY ASC);
GO

CREATE INDEX SURNAMEX ON EMPINST.SURNAME (PROF_KEY ASC, PROF_SURNAME ASC, PROF_USRSTATE ASC);
GO

-- Update schema versions
UPDATE EMPINST.SNPROF_SCHEMA SET DBSCHEMAVER= 28 WHERE COMPKEY='Profiles';
GO
